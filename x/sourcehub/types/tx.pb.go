// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shinzonetwork/sourcehub/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Resource int32

const (
	Resource_RESOURCE_PRIMITIVE Resource = 0
	Resource_RESOURCE_VIEW      Resource = 1
)

var Resource_name = map[int32]string{
	0: "RESOURCE_PRIMITIVE",
	1: "RESOURCE_VIEW",
}

var Resource_value = map[string]int32{
	"RESOURCE_PRIMITIVE": 0,
	"RESOURCE_VIEW":      1,
}

func (x Resource) String() string {
	return proto.EnumName(Resource_name, int32(x))
}

func (Resource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_975530337db1a5de, []int{0}
}

type MsgRegisterSourcehubICA struct {
	Signer                 string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ControllerConnectionId string `protobuf:"bytes,2,opt,name=controller_connection_id,json=controllerConnectionId,proto3" json:"controller_connection_id,omitempty"`
	HostConnectionId       string `protobuf:"bytes,3,opt,name=host_connection_id,json=hostConnectionId,proto3" json:"host_connection_id,omitempty"`
}

func (m *MsgRegisterSourcehubICA) Reset()         { *m = MsgRegisterSourcehubICA{} }
func (m *MsgRegisterSourcehubICA) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterSourcehubICA) ProtoMessage()    {}
func (*MsgRegisterSourcehubICA) Descriptor() ([]byte, []int) {
	return fileDescriptor_975530337db1a5de, []int{0}
}
func (m *MsgRegisterSourcehubICA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterSourcehubICA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterSourcehubICA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterSourcehubICA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterSourcehubICA.Merge(m, src)
}
func (m *MsgRegisterSourcehubICA) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterSourcehubICA) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterSourcehubICA.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterSourcehubICA proto.InternalMessageInfo

func (m *MsgRegisterSourcehubICA) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRegisterSourcehubICA) GetControllerConnectionId() string {
	if m != nil {
		return m.ControllerConnectionId
	}
	return ""
}

func (m *MsgRegisterSourcehubICA) GetHostConnectionId() string {
	if m != nil {
		return m.HostConnectionId
	}
	return ""
}

type MsgRegisterSourcehubICAResponse struct {
}

func (m *MsgRegisterSourcehubICAResponse) Reset()         { *m = MsgRegisterSourcehubICAResponse{} }
func (m *MsgRegisterSourcehubICAResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterSourcehubICAResponse) ProtoMessage()    {}
func (*MsgRegisterSourcehubICAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_975530337db1a5de, []int{1}
}
func (m *MsgRegisterSourcehubICAResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterSourcehubICAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterSourcehubICAResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterSourcehubICAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterSourcehubICAResponse.Merge(m, src)
}
func (m *MsgRegisterSourcehubICAResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterSourcehubICAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterSourcehubICAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterSourcehubICAResponse proto.InternalMessageInfo

type MsgRegisterShinzoPolicy struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgRegisterShinzoPolicy) Reset()         { *m = MsgRegisterShinzoPolicy{} }
func (m *MsgRegisterShinzoPolicy) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterShinzoPolicy) ProtoMessage()    {}
func (*MsgRegisterShinzoPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_975530337db1a5de, []int{2}
}
func (m *MsgRegisterShinzoPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterShinzoPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterShinzoPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterShinzoPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterShinzoPolicy.Merge(m, src)
}
func (m *MsgRegisterShinzoPolicy) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterShinzoPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterShinzoPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterShinzoPolicy proto.InternalMessageInfo

func (m *MsgRegisterShinzoPolicy) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type MsgRegisterShinzoPolicyResponse struct {
}

func (m *MsgRegisterShinzoPolicyResponse) Reset()         { *m = MsgRegisterShinzoPolicyResponse{} }
func (m *MsgRegisterShinzoPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterShinzoPolicyResponse) ProtoMessage()    {}
func (*MsgRegisterShinzoPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_975530337db1a5de, []int{3}
}
func (m *MsgRegisterShinzoPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterShinzoPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterShinzoPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterShinzoPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterShinzoPolicyResponse.Merge(m, src)
}
func (m *MsgRegisterShinzoPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterShinzoPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterShinzoPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterShinzoPolicyResponse proto.InternalMessageInfo

type MsgRequestStreamAccess struct {
	Signer     string   `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Resource   Resource `protobuf:"varint,2,opt,name=resource,proto3,enum=shinzonetwork.sourcehub.v1.Resource" json:"resource,omitempty"`
	StreamId   string   `protobuf:"bytes,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Did        string   `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
	Expiration uint64   `protobuf:"varint,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (m *MsgRequestStreamAccess) Reset()         { *m = MsgRequestStreamAccess{} }
func (m *MsgRequestStreamAccess) String() string { return proto.CompactTextString(m) }
func (*MsgRequestStreamAccess) ProtoMessage()    {}
func (*MsgRequestStreamAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_975530337db1a5de, []int{4}
}
func (m *MsgRequestStreamAccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestStreamAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestStreamAccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestStreamAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestStreamAccess.Merge(m, src)
}
func (m *MsgRequestStreamAccess) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestStreamAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestStreamAccess.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestStreamAccess proto.InternalMessageInfo

func (m *MsgRequestStreamAccess) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRequestStreamAccess) GetResource() Resource {
	if m != nil {
		return m.Resource
	}
	return Resource_RESOURCE_PRIMITIVE
}

func (m *MsgRequestStreamAccess) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

func (m *MsgRequestStreamAccess) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MsgRequestStreamAccess) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

type MsgRequestStreamAccessResponse struct {
}

func (m *MsgRequestStreamAccessResponse) Reset()         { *m = MsgRequestStreamAccessResponse{} }
func (m *MsgRequestStreamAccessResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestStreamAccessResponse) ProtoMessage()    {}
func (*MsgRequestStreamAccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_975530337db1a5de, []int{5}
}
func (m *MsgRequestStreamAccessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestStreamAccessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestStreamAccessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestStreamAccessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestStreamAccessResponse.Merge(m, src)
}
func (m *MsgRequestStreamAccessResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestStreamAccessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestStreamAccessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestStreamAccessResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("shinzonetwork.sourcehub.v1.Resource", Resource_name, Resource_value)
	proto.RegisterType((*MsgRegisterSourcehubICA)(nil), "shinzonetwork.sourcehub.v1.MsgRegisterSourcehubICA")
	proto.RegisterType((*MsgRegisterSourcehubICAResponse)(nil), "shinzonetwork.sourcehub.v1.MsgRegisterSourcehubICAResponse")
	proto.RegisterType((*MsgRegisterShinzoPolicy)(nil), "shinzonetwork.sourcehub.v1.MsgRegisterShinzoPolicy")
	proto.RegisterType((*MsgRegisterShinzoPolicyResponse)(nil), "shinzonetwork.sourcehub.v1.MsgRegisterShinzoPolicyResponse")
	proto.RegisterType((*MsgRequestStreamAccess)(nil), "shinzonetwork.sourcehub.v1.MsgRequestStreamAccess")
	proto.RegisterType((*MsgRequestStreamAccessResponse)(nil), "shinzonetwork.sourcehub.v1.MsgRequestStreamAccessResponse")
}

func init() {
	proto.RegisterFile("shinzonetwork/sourcehub/v1/tx.proto", fileDescriptor_975530337db1a5de)
}

var fileDescriptor_975530337db1a5de = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x92, 0xb6, 0x4a, 0x07, 0x81, 0xc2, 0x82, 0x52, 0xcb, 0x48, 0x26, 0x04, 0x0e, 0x55,
	0x84, 0x6c, 0x35, 0x05, 0x09, 0x15, 0x09, 0x51, 0xa2, 0x1c, 0x7c, 0x08, 0x54, 0x0e, 0x14, 0x89,
	0x4b, 0xd4, 0xda, 0x2b, 0xc7, 0x22, 0xf6, 0x86, 0x9d, 0x4d, 0x49, 0x39, 0x21, 0x24, 0x24, 0x8e,
	0x7c, 0x05, 0x07, 0x4e, 0xfd, 0x0c, 0x4e, 0xa8, 0x47, 0x8e, 0x28, 0x39, 0xf4, 0x37, 0x90, 0x37,
	0xb1, 0xeb, 0x94, 0xb8, 0x14, 0x6e, 0xf6, 0xec, 0x7b, 0x3b, 0xef, 0xbd, 0x1d, 0x0d, 0xdc, 0xc1,
	0x5e, 0x10, 0xbd, 0xe7, 0x11, 0x93, 0xef, 0xb8, 0x78, 0x63, 0x21, 0x1f, 0x0a, 0x97, 0xf5, 0x86,
	0xfb, 0xd6, 0xc1, 0x86, 0x25, 0x47, 0xe6, 0x40, 0x70, 0xc9, 0xa9, 0x3e, 0x07, 0x32, 0x53, 0x90,
	0x79, 0xb0, 0xa1, 0xaf, 0xb9, 0x1c, 0x43, 0x8e, 0x56, 0x88, 0x7e, 0xcc, 0x09, 0xd1, 0x9f, 0x92,
	0x6a, 0x5f, 0x09, 0xac, 0xb5, 0xd1, 0x77, 0x98, 0x1f, 0xa0, 0x64, 0xa2, 0x93, 0x90, 0xec, 0xe6,
	0x36, 0xad, 0xc0, 0x0a, 0x06, 0x7e, 0xc4, 0x84, 0x46, 0xaa, 0x64, 0x7d, 0xd5, 0x99, 0xfd, 0xd1,
	0x87, 0xa0, 0xb9, 0x3c, 0x92, 0x82, 0xf7, 0xfb, 0x4c, 0x74, 0x5d, 0x1e, 0x45, 0xcc, 0x95, 0x01,
	0x8f, 0xba, 0x81, 0xa7, 0x5d, 0x52, 0xc8, 0xca, 0xe9, 0x79, 0x33, 0x3d, 0xb6, 0x3d, 0x7a, 0x0f,
	0x68, 0x8f, 0xa3, 0x3c, 0xc3, 0x29, 0x2a, 0x4e, 0x39, 0x3e, 0xc9, 0xa2, 0xb7, 0x2e, 0x7f, 0x3c,
	0x39, 0xaa, 0xcf, 0x9a, 0xd6, 0x6e, 0xc3, 0xad, 0x1c, 0x9d, 0x0e, 0xc3, 0x01, 0x8f, 0x90, 0xd5,
	0x1e, 0xcf, 0x5b, 0x51, 0x69, 0xec, 0xf0, 0x7e, 0xe0, 0x1e, 0xe6, 0x59, 0x39, 0xb7, 0x45, 0x86,
	0x9f, 0xb6, 0xf8, 0x41, 0xa0, 0xa2, 0x30, 0x6f, 0x87, 0x0c, 0x65, 0x47, 0x0a, 0xb6, 0x17, 0x6e,
	0xbb, 0x2e, 0x43, 0xcc, 0x4d, 0xeb, 0x09, 0x94, 0x04, 0x9b, 0x3e, 0x86, 0x4a, 0xe7, 0x6a, 0xe3,
	0xae, 0x99, 0xff, 0x52, 0xa6, 0x33, 0xc3, 0x3a, 0x29, 0x8b, 0xde, 0x84, 0x55, 0x54, 0x9d, 0x4e,
	0xc3, 0x2a, 0x4d, 0x0b, 0xb6, 0x47, 0xcb, 0x50, 0xf4, 0x02, 0x4f, 0x5b, 0x52, 0xe5, 0xf8, 0x93,
	0x1a, 0x00, 0x6c, 0x34, 0x08, 0xc4, 0x5e, 0x1c, 0xa3, 0xb6, 0x5c, 0x25, 0xeb, 0x4b, 0x4e, 0xa6,
	0x32, 0xef, 0xb9, 0x0a, 0xc6, 0x62, 0x3f, 0x89, 0xe5, 0xfa, 0x03, 0x28, 0x25, 0x9a, 0x68, 0x05,
	0xa8, 0xd3, 0xea, 0x3c, 0x7f, 0xe9, 0x34, 0x5b, 0xdd, 0x1d, 0xc7, 0x6e, 0xdb, 0x2f, 0xec, 0xdd,
	0x56, 0xb9, 0x40, 0xaf, 0xc1, 0x95, 0xb4, 0xbe, 0x6b, 0xb7, 0x5e, 0x95, 0x49, 0xe3, 0x5b, 0x11,
	0x8a, 0x6d, 0xf4, 0xe9, 0x67, 0x02, 0x37, 0x16, 0x4e, 0xd7, 0xe6, 0x79, 0x29, 0xe4, 0x3c, 0xb5,
	0xfe, 0xe8, 0x3f, 0x48, 0x89, 0x93, 0x79, 0x29, 0xd9, 0xe9, 0xb8, 0xb0, 0x94, 0x0c, 0xe9, 0xe2,
	0x52, 0x16, 0xcc, 0x11, 0xfd, 0x44, 0xe0, 0xfa, 0xa2, 0x21, 0x6a, 0xfc, 0xf5, 0xd2, 0x3f, 0x38,
	0xfa, 0xd6, 0xbf, 0x73, 0x12, 0x1d, 0xfa, 0xf2, 0x87, 0x93, 0xa3, 0x3a, 0x79, 0xfa, 0xec, 0xfb,
	0xd8, 0x20, 0xc7, 0x63, 0x83, 0xfc, 0x1a, 0x1b, 0xe4, 0xcb, 0xc4, 0x28, 0x1c, 0x4f, 0x8c, 0xc2,
	0xcf, 0x89, 0x51, 0x78, 0x7d, 0xdf, 0x0f, 0x64, 0x7c, 0x95, 0xcb, 0x43, 0xeb, 0xcc, 0x12, 0x52,
	0x7f, 0xf1, 0x12, 0x1a, 0x65, 0x16, 0x92, 0x3c, 0x1c, 0x30, 0xdc, 0x5f, 0x51, 0xcb, 0x65, 0xf3,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xec, 0x0d, 0x03, 0xb8, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RegisterSourcehubICA(ctx context.Context, in *MsgRegisterSourcehubICA, opts ...grpc.CallOption) (*MsgRegisterSourcehubICAResponse, error)
	RegisterShinzoPolicy(ctx context.Context, in *MsgRegisterShinzoPolicy, opts ...grpc.CallOption) (*MsgRegisterShinzoPolicyResponse, error)
	RequestStreamAccess(ctx context.Context, in *MsgRequestStreamAccess, opts ...grpc.CallOption) (*MsgRequestStreamAccessResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterSourcehubICA(ctx context.Context, in *MsgRegisterSourcehubICA, opts ...grpc.CallOption) (*MsgRegisterSourcehubICAResponse, error) {
	out := new(MsgRegisterSourcehubICAResponse)
	err := c.cc.Invoke(ctx, "/shinzonetwork.sourcehub.v1.Msg/RegisterSourcehubICA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterShinzoPolicy(ctx context.Context, in *MsgRegisterShinzoPolicy, opts ...grpc.CallOption) (*MsgRegisterShinzoPolicyResponse, error) {
	out := new(MsgRegisterShinzoPolicyResponse)
	err := c.cc.Invoke(ctx, "/shinzonetwork.sourcehub.v1.Msg/RegisterShinzoPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestStreamAccess(ctx context.Context, in *MsgRequestStreamAccess, opts ...grpc.CallOption) (*MsgRequestStreamAccessResponse, error) {
	out := new(MsgRequestStreamAccessResponse)
	err := c.cc.Invoke(ctx, "/shinzonetwork.sourcehub.v1.Msg/RequestStreamAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RegisterSourcehubICA(context.Context, *MsgRegisterSourcehubICA) (*MsgRegisterSourcehubICAResponse, error)
	RegisterShinzoPolicy(context.Context, *MsgRegisterShinzoPolicy) (*MsgRegisterShinzoPolicyResponse, error)
	RequestStreamAccess(context.Context, *MsgRequestStreamAccess) (*MsgRequestStreamAccessResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterSourcehubICA(ctx context.Context, req *MsgRegisterSourcehubICA) (*MsgRegisterSourcehubICAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSourcehubICA not implemented")
}
func (*UnimplementedMsgServer) RegisterShinzoPolicy(ctx context.Context, req *MsgRegisterShinzoPolicy) (*MsgRegisterShinzoPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterShinzoPolicy not implemented")
}
func (*UnimplementedMsgServer) RequestStreamAccess(ctx context.Context, req *MsgRequestStreamAccess) (*MsgRequestStreamAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestStreamAccess not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterSourcehubICA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterSourcehubICA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterSourcehubICA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shinzonetwork.sourcehub.v1.Msg/RegisterSourcehubICA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterSourcehubICA(ctx, req.(*MsgRegisterSourcehubICA))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterShinzoPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterShinzoPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterShinzoPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shinzonetwork.sourcehub.v1.Msg/RegisterShinzoPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterShinzoPolicy(ctx, req.(*MsgRegisterShinzoPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestStreamAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestStreamAccess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestStreamAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shinzonetwork.sourcehub.v1.Msg/RequestStreamAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestStreamAccess(ctx, req.(*MsgRequestStreamAccess))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shinzonetwork.sourcehub.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSourcehubICA",
			Handler:    _Msg_RegisterSourcehubICA_Handler,
		},
		{
			MethodName: "RegisterShinzoPolicy",
			Handler:    _Msg_RegisterShinzoPolicy_Handler,
		},
		{
			MethodName: "RequestStreamAccess",
			Handler:    _Msg_RequestStreamAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shinzonetwork/sourcehub/v1/tx.proto",
}

func (m *MsgRegisterSourcehubICA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterSourcehubICA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterSourcehubICA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostConnectionId) > 0 {
		i -= len(m.HostConnectionId)
		copy(dAtA[i:], m.HostConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HostConnectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ControllerConnectionId) > 0 {
		i -= len(m.ControllerConnectionId)
		copy(dAtA[i:], m.ControllerConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ControllerConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterSourcehubICAResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterSourcehubICAResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterSourcehubICAResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterShinzoPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterShinzoPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterShinzoPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterShinzoPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterShinzoPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterShinzoPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestStreamAccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestStreamAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestStreamAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Resource != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Resource))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestStreamAccessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestStreamAccessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestStreamAccessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterSourcehubICA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ControllerConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HostConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterSourcehubICAResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterShinzoPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterShinzoPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestStreamAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Resource != 0 {
		n += 1 + sovTx(uint64(m.Resource))
	}
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovTx(uint64(m.Expiration))
	}
	return n
}

func (m *MsgRequestStreamAccessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterSourcehubICA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterSourcehubICA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterSourcehubICA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterSourcehubICAResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterSourcehubICAResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterSourcehubICAResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterShinzoPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterShinzoPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterShinzoPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterShinzoPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterShinzoPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterShinzoPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestStreamAccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestStreamAccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestStreamAccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			m.Resource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resource |= Resource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestStreamAccessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestStreamAccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestStreamAccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
