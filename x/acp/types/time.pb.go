// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcehub/acp/time.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Duration models a time interval expressed either as a wallclock
// Duration interval or a number of blocks
type Duration struct {
	// Types that are valid to be assigned to Duration:
	//	*Duration_ProtoDuration
	//	*Duration_BlockCount
	Duration isDuration_Duration `protobuf_oneof:"duration"`
}

func (m *Duration) Reset()         { *m = Duration{} }
func (m *Duration) String() string { return proto.CompactTextString(m) }
func (*Duration) ProtoMessage()    {}
func (*Duration) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a759fd028b3acfe, []int{0}
}
func (m *Duration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Duration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Duration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Duration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Duration.Merge(m, src)
}
func (m *Duration) XXX_Size() int {
	return m.Size()
}
func (m *Duration) XXX_DiscardUnknown() {
	xxx_messageInfo_Duration.DiscardUnknown(m)
}

var xxx_messageInfo_Duration proto.InternalMessageInfo

type isDuration_Duration interface {
	isDuration_Duration()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Duration_ProtoDuration struct {
	ProtoDuration *types.Duration `protobuf:"bytes,1,opt,name=proto_duration,json=protoDuration,proto3,oneof" json:"proto_duration,omitempty"`
}
type Duration_BlockCount struct {
	BlockCount uint64 `protobuf:"varint,2,opt,name=block_count,json=blockCount,proto3,oneof" json:"block_count,omitempty"`
}

func (*Duration_ProtoDuration) isDuration_Duration() {}
func (*Duration_BlockCount) isDuration_Duration()    {}

func (m *Duration) GetDuration() isDuration_Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Duration) GetProtoDuration() *types.Duration {
	if x, ok := m.GetDuration().(*Duration_ProtoDuration); ok {
		return x.ProtoDuration
	}
	return nil
}

func (m *Duration) GetBlockCount() uint64 {
	if x, ok := m.GetDuration().(*Duration_BlockCount); ok {
		return x.BlockCount
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Duration) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Duration_ProtoDuration)(nil),
		(*Duration_BlockCount)(nil),
	}
}

// Timestamp models an instant in time expressed as a wallclock
// Timestamp and a block height
type Timestamp struct {
	ProtoTs     *types.Timestamp `protobuf:"bytes,1,opt,name=proto_ts,json=protoTs,proto3" json:"proto_ts,omitempty"`
	BlockHeight uint64           `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a759fd028b3acfe, []int{1}
}
func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return m.Size()
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func (m *Timestamp) GetProtoTs() *types.Timestamp {
	if m != nil {
		return m.ProtoTs
	}
	return nil
}

func (m *Timestamp) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Duration)(nil), "sourcehub.acp.Duration")
	proto.RegisterType((*Timestamp)(nil), "sourcehub.acp.Timestamp")
}

func init() { proto.RegisterFile("sourcehub/acp/time.proto", fileDescriptor_1a759fd028b3acfe) }

var fileDescriptor_1a759fd028b3acfe = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0xce, 0x2f, 0x2d,
	0x4a, 0x4e, 0xcd, 0x28, 0x4d, 0xd2, 0x4f, 0x4c, 0x2e, 0xd0, 0x2f, 0xc9, 0xcc, 0x4d, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x85, 0xcb, 0xe8, 0x25, 0x26, 0x17, 0x48, 0x09, 0x26, 0xe6,
	0x66, 0xe6, 0xe5, 0xeb, 0x83, 0x49, 0x88, 0x0a, 0x29, 0xb9, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54,
	0x7d, 0x30, 0x2f, 0xa9, 0x34, 0x4d, 0x3f, 0xa5, 0xb4, 0x28, 0xb1, 0x24, 0x33, 0x3f, 0x0f, 0x2a,
	0x2f, 0x8f, 0x2e, 0x0f, 0x32, 0xbd, 0xb8, 0x24, 0x31, 0xb7, 0x00, 0xa2, 0x40, 0x69, 0x09, 0x23,
	0x17, 0x87, 0x0b, 0x54, 0x8f, 0x50, 0x38, 0x17, 0x1f, 0x58, 0x34, 0x1e, 0x66, 0x8a, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0xb7, 0x91, 0xa4, 0x1e, 0xc4, 0x18, 0x3d, 0x98, 0x31, 0x7a, 0x30, 0x2d, 0x4e,
	0xc2, 0x9b, 0x9e, 0x6f, 0xd0, 0x42, 0xd3, 0xe5, 0xc1, 0x10, 0xc4, 0x0b, 0x16, 0x81, 0x1b, 0x6c,
	0xcc, 0xc5, 0x9d, 0x94, 0x93, 0x9f, 0x9c, 0x1d, 0x9f, 0x9c, 0x5f, 0x9a, 0x57, 0x22, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0xe2, 0x24, 0x00, 0xd2, 0x8a, 0x2c, 0xee, 0xc1, 0x10, 0xc4, 0x05, 0xe6, 0x3a,
	0x83, 0x78, 0x4e, 0x5c, 0x5c, 0x1c, 0x30, 0x13, 0x95, 0x52, 0xb9, 0x38, 0x43, 0x60, 0x2e, 0x17,
	0x32, 0xe5, 0xe2, 0x80, 0x58, 0x58, 0x52, 0x0c, 0x75, 0xa0, 0x14, 0x86, 0x03, 0xe1, 0xaa, 0x83,
	0xd8, 0xc1, 0x62, 0x21, 0xc5, 0x42, 0x8a, 0x5c, 0x3c, 0x10, 0xcb, 0x32, 0x52, 0x33, 0xd3, 0x33,
	0xa0, 0xae, 0x08, 0x82, 0x38, 0xc0, 0x03, 0x2c, 0xe4, 0xe4, 0x71, 0xe2, 0x91, 0x1c, 0xe3, 0x85,
	0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3,
	0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x7a, 0xe9, 0x99, 0x25, 0xa0, 0x78, 0x48, 0xce, 0xcf, 0xd5, 0x87,
	0xc4, 0x4a, 0x5e, 0x6a, 0x49, 0x79, 0x7e, 0x51, 0xb6, 0x3e, 0x22, 0xf6, 0x2a, 0x20, 0xf1, 0x57,
	0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0xb6, 0xd5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xe9,
	0xd1, 0x91, 0xdd, 0x01, 0x00, 0x00,
}

func (m *Duration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Duration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Duration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != nil {
		{
			size := m.Duration.Size()
			i -= size
			if _, err := m.Duration.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Duration_ProtoDuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Duration_ProtoDuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProtoDuration != nil {
		{
			size, err := m.ProtoDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Duration_BlockCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Duration_BlockCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTime(dAtA, i, uint64(m.BlockCount))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintTime(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ProtoTs != nil {
		{
			size, err := m.ProtoTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTime(dAtA []byte, offset int, v uint64) int {
	offset -= sovTime(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Duration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != nil {
		n += m.Duration.Size()
	}
	return n
}

func (m *Duration_ProtoDuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtoDuration != nil {
		l = m.ProtoDuration.Size()
		n += 1 + l + sovTime(uint64(l))
	}
	return n
}
func (m *Duration_BlockCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTime(uint64(m.BlockCount))
	return n
}
func (m *Timestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtoTs != nil {
		l = m.ProtoTs.Size()
		n += 1 + l + sovTime(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTime(uint64(m.BlockHeight))
	}
	return n
}

func sovTime(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTime(x uint64) (n int) {
	return sovTime(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Duration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Duration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Duration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Duration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Duration = &Duration_ProtoDuration{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Duration = &Duration_BlockCount{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtoTs == nil {
				m.ProtoTs = &types.Timestamp{}
			}
			if err := m.ProtoTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTime(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTime
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTime
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTime
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTime
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTime        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTime          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTime = fmt.Errorf("proto: unexpected end of group")
)
