// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcehub/acp/record.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	types "github.com/sourcenetwork/acp_core/pkg/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RecordMetadata models metadata which is stored alongside acp records
type RecordMetadata struct {
	// creation_ts is the timestamp of record creation
	CreationTs *Timestamp `protobuf:"bytes,1,opt,name=creation_ts,json=creationTs,proto3" json:"creation_ts,omitempty"`
	// tx_hash is the hash256 of the tx bytes which produced the record
	TxHash []byte `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// tx_signer is the SourceHub bech32 address of the account that signed the Tx
	TxSigner string `protobuf:"bytes,3,opt,name=tx_signer,json=txSigner,proto3" json:"tx_signer,omitempty"`
	// owner_did is the DID of the PolicyCmd actor
	OwnerDid string `protobuf:"bytes,4,opt,name=owner_did,json=ownerDid,proto3" json:"owner_did,omitempty"`
}

func (m *RecordMetadata) Reset()         { *m = RecordMetadata{} }
func (m *RecordMetadata) String() string { return proto.CompactTextString(m) }
func (*RecordMetadata) ProtoMessage()    {}
func (*RecordMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_5977940639fee4f6, []int{0}
}
func (m *RecordMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordMetadata.Merge(m, src)
}
func (m *RecordMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RecordMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RecordMetadata proto.InternalMessageInfo

func (m *RecordMetadata) GetCreationTs() *Timestamp {
	if m != nil {
		return m.CreationTs
	}
	return nil
}

func (m *RecordMetadata) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *RecordMetadata) GetTxSigner() string {
	if m != nil {
		return m.TxSigner
	}
	return ""
}

func (m *RecordMetadata) GetOwnerDid() string {
	if m != nil {
		return m.OwnerDid
	}
	return ""
}

type PolicyRecord struct {
	Policy    *types.Policy   `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	Metadata  *RecordMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	RawPolicy string          `protobuf:"bytes,3,opt,name=raw_policy,json=rawPolicy,proto3" json:"raw_policy,omitempty"`
	// marshal_type flags the format of policy_raw
	MarshalType types.PolicyMarshalingType `protobuf:"varint,4,opt,name=marshal_type,json=marshalType,proto3,enum=sourcenetwork.acp_core.PolicyMarshalingType" json:"marshal_type,omitempty"`
}

func (m *PolicyRecord) Reset()         { *m = PolicyRecord{} }
func (m *PolicyRecord) String() string { return proto.CompactTextString(m) }
func (*PolicyRecord) ProtoMessage()    {}
func (*PolicyRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_5977940639fee4f6, []int{1}
}
func (m *PolicyRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyRecord.Merge(m, src)
}
func (m *PolicyRecord) XXX_Size() int {
	return m.Size()
}
func (m *PolicyRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyRecord proto.InternalMessageInfo

func (m *PolicyRecord) GetPolicy() *types.Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *PolicyRecord) GetMetadata() *RecordMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PolicyRecord) GetRawPolicy() string {
	if m != nil {
		return m.RawPolicy
	}
	return ""
}

func (m *PolicyRecord) GetMarshalType() types.PolicyMarshalingType {
	if m != nil {
		return m.MarshalType
	}
	return types.PolicyMarshalingType_UNKNOWN
}

type RelationshipRecord struct {
	PolicyId     string              `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Relationship *types.Relationship `protobuf:"bytes,2,opt,name=relationship,proto3" json:"relationship,omitempty"`
	Archived     bool                `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty"`
	Metadata     *RecordMetadata     `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *RelationshipRecord) Reset()         { *m = RelationshipRecord{} }
func (m *RelationshipRecord) String() string { return proto.CompactTextString(m) }
func (*RelationshipRecord) ProtoMessage()    {}
func (*RelationshipRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_5977940639fee4f6, []int{2}
}
func (m *RelationshipRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationshipRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationshipRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationshipRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationshipRecord.Merge(m, src)
}
func (m *RelationshipRecord) XXX_Size() int {
	return m.Size()
}
func (m *RelationshipRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationshipRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RelationshipRecord proto.InternalMessageInfo

func (m *RelationshipRecord) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *RelationshipRecord) GetRelationship() *types.Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *RelationshipRecord) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *RelationshipRecord) GetMetadata() *RecordMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*RecordMetadata)(nil), "sourcehub.acp.RecordMetadata")
	proto.RegisterType((*PolicyRecord)(nil), "sourcehub.acp.PolicyRecord")
	proto.RegisterType((*RelationshipRecord)(nil), "sourcehub.acp.RelationshipRecord")
}

func init() { proto.RegisterFile("sourcehub/acp/record.proto", fileDescriptor_5977940639fee4f6) }

var fileDescriptor_5977940639fee4f6 = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0x6e, 0x74, 0xa9, 0x6d, 0x5a, 0x17, 0x0c, 0xc2, 0x8e, 0x5d, 0x76, 0x2c, 0xd5, 0x43, 0x05,
	0x99, 0x60, 0x05, 0x61, 0xaf, 0xe2, 0xa1, 0x1e, 0x16, 0x65, 0xec, 0xc9, 0x4b, 0x48, 0x33, 0x71,
	0x26, 0xd8, 0x99, 0x0c, 0x49, 0xba, 0x6d, 0xff, 0x85, 0xbf, 0xc0, 0xdf, 0xe3, 0x71, 0xf1, 0xe4,
	0x51, 0xda, 0x5f, 0xe0, 0x3f, 0x90, 0x49, 0xd2, 0xba, 0x11, 0x56, 0xd9, 0x4b, 0x3b, 0xef, 0x7d,
	0xdf, 0x7b, 0xf9, 0xbe, 0x97, 0x17, 0x38, 0xd0, 0x72, 0xa9, 0x18, 0x2f, 0x96, 0x73, 0x4c, 0x59,
	0x8d, 0x15, 0x67, 0x52, 0x65, 0x49, 0xad, 0xa4, 0x91, 0xe8, 0xfe, 0x01, 0x4b, 0x28, 0xab, 0x07,
	0x0f, 0x68, 0x29, 0x2a, 0x89, 0xed, 0xaf, 0x63, 0x0c, 0x4e, 0x98, 0xd4, 0xa5, 0xd4, 0xb8, 0xd4,
	0x39, 0xbe, 0x7c, 0xd1, 0xfc, 0x79, 0xe0, 0x91, 0x03, 0x88, 0x8d, 0xb0, 0x0b, 0x3c, 0xf4, 0x30,
	0x97, 0xb9, 0x74, 0xf9, 0xe6, 0xcb, 0x67, 0x1f, 0xe7, 0x52, 0xe6, 0x0b, 0x8e, 0x6d, 0x34, 0x5f,
	0x7e, 0xc2, 0x46, 0x94, 0x5c, 0x1b, 0x5a, 0xd6, 0x9e, 0xf0, 0x24, 0x14, 0x4a, 0x19, 0xe3, 0x5a,
	0x93, 0x8c, 0x33, 0xa1, 0x85, 0xac, 0x3c, 0x29, 0x0a, 0x49, 0x4d, 0x0f, 0x8f, 0x3c, 0x73, 0x48,
	0xc5, 0xcd, 0x4a, 0xaa, 0xcf, 0x0d, 0x4a, 0x98, 0x54, 0x1c, 0xd7, 0x72, 0x21, 0xd8, 0x86, 0xe8,
	0x42, 0x2a, 0x13, 0x9e, 0x74, 0x03, 0xf5, 0x3f, 0xfd, 0x14, 0x5f, 0x50, 0x23, 0x64, 0xa5, 0x0b,
	0xe1, 0x95, 0x8f, 0xbe, 0x02, 0x78, 0x9c, 0xda, 0xb9, 0x5e, 0x70, 0x43, 0x33, 0x6a, 0x28, 0x3a,
	0x87, 0x3d, 0xa6, 0xb8, 0x25, 0x12, 0xa3, 0x23, 0x30, 0x04, 0xe3, 0xde, 0x24, 0x4a, 0x82, 0x79,
	0x27, 0xb3, 0xfd, 0x04, 0x52, 0xb8, 0x27, 0xcf, 0x34, 0x3a, 0x81, 0xf7, 0xcc, 0x9a, 0x14, 0x54,
	0x17, 0xd1, 0x9d, 0x21, 0x18, 0xf7, 0xd3, 0xb6, 0x59, 0x4f, 0xa9, 0x2e, 0xd0, 0x29, 0xec, 0x9a,
	0x35, 0xd1, 0x22, 0xaf, 0xb8, 0x8a, 0xee, 0x0e, 0xc1, 0xb8, 0x9b, 0x76, 0xcc, 0xfa, 0x83, 0x8d,
	0x1b, 0x50, 0xae, 0x2a, 0xae, 0x48, 0x26, 0xb2, 0xe8, 0xc8, 0x81, 0x36, 0xf1, 0x46, 0x64, 0xa3,
	0x5f, 0x00, 0xf6, 0xdf, 0x5b, 0x73, 0x4e, 0x26, 0x7a, 0x05, 0xdb, 0xce, 0xac, 0x57, 0x16, 0x27,
	0x81, 0xdb, 0x64, 0xef, 0x36, 0xf1, 0x55, 0x9e, 0x8d, 0xce, 0x61, 0xa7, 0xf4, 0x16, 0xad, 0xb8,
	0xde, 0xe4, 0xec, 0x2f, 0x4f, 0xe1, 0x1c, 0xd2, 0x03, 0x1d, 0x9d, 0x41, 0xa8, 0xe8, 0x8a, 0xf8,
	0x63, 0x9d, 0xfc, 0xae, 0xa2, 0x2b, 0x77, 0x02, 0x7a, 0x07, 0xfb, 0x25, 0x55, 0xba, 0xa0, 0x0b,
	0x62, 0x36, 0x35, 0xb7, 0x16, 0x8e, 0x27, 0xcf, 0xff, 0xad, 0xeb, 0xc2, 0x55, 0x88, 0x2a, 0x9f,
	0x6d, 0x6a, 0x9e, 0xf6, 0x7c, 0x87, 0x26, 0x18, 0x7d, 0x07, 0x10, 0xa5, 0xd7, 0xee, 0xca, 0x3b,
	0x3f, 0x85, 0x5d, 0xbf, 0x11, 0x22, 0xb3, 0xe6, 0xbb, 0x69, 0xc7, 0x25, 0xde, 0x66, 0x68, 0x0a,
	0xfb, 0xd7, 0xaf, 0xd7, 0x5b, 0x7c, 0x7a, 0x93, 0x88, 0xa0, 0x7d, 0x50, 0x89, 0x06, 0xb0, 0x43,
	0x15, 0x2b, 0xc4, 0x25, 0xcf, 0xac, 0xd7, 0x4e, 0x7a, 0x88, 0x83, 0x21, 0x1e, 0xdd, 0x6a, 0x88,
	0xaf, 0xa7, 0xdf, 0xb6, 0x31, 0xb8, 0xda, 0xc6, 0xe0, 0xe7, 0x36, 0x06, 0x5f, 0x76, 0x71, 0xeb,
	0x6a, 0x17, 0xb7, 0x7e, 0xec, 0xe2, 0xd6, 0xc7, 0x24, 0x17, 0xa6, 0x29, 0x67, 0xb2, 0xc4, 0xe1,
	0xe6, 0xfe, 0x79, 0x31, 0x6b, 0xf7, 0x66, 0x36, 0x35, 0xd7, 0xf3, 0xb6, 0x5d, 0xdd, 0x97, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x98, 0xe4, 0xfd, 0xc7, 0x1f, 0x04, 0x00, 0x00,
}

func (m *RecordMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerDid) > 0 {
		i -= len(m.OwnerDid)
		copy(dAtA[i:], m.OwnerDid)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.OwnerDid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxSigner) > 0 {
		i -= len(m.TxSigner)
		copy(dAtA[i:], m.TxSigner)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.TxSigner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreationTs != nil {
		{
			size, err := m.CreationTs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarshalType != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.MarshalType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RawPolicy) > 0 {
		i -= len(m.RawPolicy)
		copy(dAtA[i:], m.RawPolicy)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.RawPolicy)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelationshipRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationshipRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationshipRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Relationship != nil {
		{
			size, err := m.Relationship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRecord(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecordMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationTs != nil {
		l = m.CreationTs.Size()
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.TxSigner)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.OwnerDid)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *PolicyRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.RawPolicy)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.MarshalType != 0 {
		n += 1 + sovRecord(uint64(m.MarshalType))
	}
	return n
}

func (m *RelationshipRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.Relationship != nil {
		l = m.Relationship.Size()
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRecord(uint64(l))
	}
	return n
}

func sovRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecord(x uint64) (n int) {
	return sovRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecordMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTs == nil {
				m.CreationTs = &Timestamp{}
			}
			if err := m.CreationTs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &types.Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &RecordMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarshalType", wireType)
			}
			m.MarshalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarshalType |= types.PolicyMarshalingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationshipRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationshipRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationshipRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relationship == nil {
				m.Relationship = &types.Relationship{}
			}
			if err := m.Relationship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &RecordMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecord = fmt.Errorf("proto: unexpected end of group")
)
