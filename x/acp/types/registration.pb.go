// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcehub/acp/registration.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	types "github.com/sourcenetwork/acp_core/pkg/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AmendmentEvent is a record which tracks executions of the Registration Amendment rule in SourceHub ACP
type AmendmentEvent struct {
	// event id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// id of affected policy
	PolicyId string `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// object whose registration was amended
	Object *types.Object `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	// new_owner is the new object owner
	NewOwner *types.Actor `protobuf:"bytes,4,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
	// previous_owner is the previous object owner
	PreviousOwner *types.Actor `protobuf:"bytes,5,opt,name=previous_owner,json=previousOwner,proto3" json:"previous_owner,omitempty"`
	// commitment_id is the id of the commitment which generated the amendment
	CommitmentId uint64 `protobuf:"varint,6,opt,name=commitment_id,json=commitmentId,proto3" json:"commitment_id,omitempty"`
	// hijack_flag is true if the amendment rule was executed and the new_owner chose to flag
	// the previous_owner as a potential object hijacker
	HijackFlag bool            `protobuf:"varint,7,opt,name=hijack_flag,json=hijackFlag,proto3" json:"hijack_flag,omitempty"`
	Metadata   *RecordMetadata `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *AmendmentEvent) Reset()         { *m = AmendmentEvent{} }
func (m *AmendmentEvent) String() string { return proto.CompactTextString(m) }
func (*AmendmentEvent) ProtoMessage()    {}
func (*AmendmentEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1356cd7eda5c526d, []int{0}
}
func (m *AmendmentEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AmendmentEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AmendmentEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AmendmentEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmendmentEvent.Merge(m, src)
}
func (m *AmendmentEvent) XXX_Size() int {
	return m.Size()
}
func (m *AmendmentEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AmendmentEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AmendmentEvent proto.InternalMessageInfo

func (m *AmendmentEvent) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AmendmentEvent) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *AmendmentEvent) GetObject() *types.Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *AmendmentEvent) GetNewOwner() *types.Actor {
	if m != nil {
		return m.NewOwner
	}
	return nil
}

func (m *AmendmentEvent) GetPreviousOwner() *types.Actor {
	if m != nil {
		return m.PreviousOwner
	}
	return nil
}

func (m *AmendmentEvent) GetCommitmentId() uint64 {
	if m != nil {
		return m.CommitmentId
	}
	return 0
}

func (m *AmendmentEvent) GetHijackFlag() bool {
	if m != nil {
		return m.HijackFlag
	}
	return false
}

func (m *AmendmentEvent) GetMetadata() *RecordMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*AmendmentEvent)(nil), "sourcehub.acp.AmendmentEvent")
}

func init() { proto.RegisterFile("sourcehub/acp/registration.proto", fileDescriptor_1356cd7eda5c526d) }

var fileDescriptor_1356cd7eda5c526d = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x3f, 0x6f, 0xd4, 0x40,
	0x10, 0xc5, 0x6f, 0x8f, 0x70, 0xf8, 0x36, 0xdc, 0x15, 0x5b, 0x59, 0x87, 0x70, 0x2c, 0x68, 0x4c,
	0x63, 0x4b, 0x20, 0x21, 0x41, 0x17, 0x04, 0x88, 0x14, 0x28, 0x92, 0x4b, 0x1a, 0x6b, 0xbd, 0x3b,
	0xf1, 0x6d, 0xe2, 0xdd, 0xb1, 0xd6, 0xeb, 0x98, 0x7c, 0x0b, 0x3e, 0x16, 0x65, 0x4a, 0x4a, 0x74,
	0xf7, 0x25, 0x28, 0x91, 0xff, 0x24, 0x27, 0x23, 0x21, 0xa5, 0x9d, 0xf7, 0x7b, 0x6f, 0x66, 0xf4,
	0x68, 0x58, 0x63, 0x63, 0x05, 0x6c, 0x9b, 0x3c, 0xe1, 0xa2, 0x4a, 0x2c, 0x14, 0xaa, 0x76, 0x96,
	0x3b, 0x85, 0x26, 0xae, 0x2c, 0x3a, 0x64, 0xab, 0x7b, 0x22, 0xe6, 0xa2, 0xda, 0x9c, 0x14, 0x88,
	0x45, 0x09, 0x49, 0x2f, 0xe6, 0xcd, 0x45, 0xe2, 0x94, 0x86, 0xda, 0x71, 0x5d, 0x0d, 0xfc, 0x66,
	0xf3, 0x6f, 0xa2, 0x40, 0x2b, 0x47, 0xcd, 0x9f, 0x6a, 0x9d, 0x75, 0x54, 0x5e, 0x0d, 0x8a, 0x01,
	0xd7, 0xa2, 0xbd, 0xea, 0xd4, 0x4c, 0xa0, 0x85, 0xc4, 0x42, 0xd9, 0x1f, 0x53, 0x6f, 0xd5, 0xb8,
	0xe0, 0xc5, 0x9f, 0x39, 0x5d, 0x9f, 0x6a, 0x30, 0x52, 0x83, 0x71, 0x9f, 0xae, 0xc1, 0x38, 0xb6,
	0xa6, 0x73, 0x25, 0x7d, 0x12, 0x92, 0xe8, 0x28, 0x9d, 0x2b, 0xc9, 0x9e, 0xd1, 0x65, 0x85, 0xa5,
	0x12, 0x37, 0x99, 0x92, 0xfe, 0x3c, 0x24, 0xd1, 0x32, 0xf5, 0x86, 0xc1, 0x99, 0x64, 0x6f, 0xe9,
	0x02, 0xf3, 0x4b, 0x10, 0xce, 0x7f, 0x14, 0x92, 0xe8, 0xf8, 0x75, 0x10, 0x4f, 0x76, 0xc7, 0x77,
	0xbb, 0xe3, 0xf3, 0x9e, 0x4a, 0x47, 0x9a, 0xbd, 0xa7, 0x4b, 0x03, 0x6d, 0x86, 0xad, 0x01, 0xeb,
	0x1f, 0xf5, 0xd6, 0xe7, 0xff, 0xb3, 0x9e, 0x0a, 0x87, 0x36, 0xf5, 0x0c, 0xb4, 0xe7, 0x1d, 0xce,
	0x3e, 0xd2, 0x75, 0x65, 0xe1, 0x5a, 0x61, 0x53, 0x8f, 0x01, 0x8f, 0x1f, 0x12, 0xb0, 0xba, 0x33,
	0x0d, 0x29, 0x2f, 0xe9, 0x4a, 0xa0, 0xd6, 0xca, 0x75, 0x9f, 0x77, 0xaf, 0x2d, 0xfa, 0x8f, 0x9f,
	0x1e, 0x86, 0x67, 0x92, 0x9d, 0xd0, 0xe3, 0xad, 0xba, 0xe4, 0xe2, 0x2a, 0xbb, 0x28, 0x79, 0xe1,
	0x3f, 0x09, 0x49, 0xe4, 0xa5, 0x74, 0x18, 0x7d, 0x2e, 0x79, 0xc1, 0xde, 0x51, 0x4f, 0x83, 0xe3,
	0x92, 0x3b, 0xee, 0x7b, 0x93, 0x2b, 0xc6, 0x8e, 0xe3, 0xb4, 0xef, 0xec, 0xeb, 0x08, 0xa5, 0xf7,
	0xf8, 0x87, 0x2f, 0x3f, 0x77, 0x01, 0xb9, 0xdd, 0x05, 0xe4, 0xf7, 0x2e, 0x20, 0x3f, 0xf6, 0xc1,
	0xec, 0x76, 0x1f, 0xcc, 0x7e, 0xed, 0x83, 0xd9, 0xb7, 0xb8, 0x50, 0xae, 0xb3, 0x0b, 0xd4, 0xc9,
	0xb4, 0xca, 0x43, 0xe5, 0xdf, 0x87, 0xd2, 0x6f, 0x2a, 0xa8, 0xf3, 0x45, 0xdf, 0xe5, 0x9b, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x31, 0x44, 0x1c, 0x59, 0x80, 0x02, 0x00, 0x00,
}

func (m *AmendmentEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AmendmentEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AmendmentEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegistration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.HijackFlag {
		i--
		if m.HijackFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CommitmentId != 0 {
		i = encodeVarintRegistration(dAtA, i, uint64(m.CommitmentId))
		i--
		dAtA[i] = 0x30
	}
	if m.PreviousOwner != nil {
		{
			size, err := m.PreviousOwner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegistration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.NewOwner != nil {
		{
			size, err := m.NewOwner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegistration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegistration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRegistration(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegistration(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegistration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AmendmentEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRegistration(uint64(m.Id))
	}
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovRegistration(uint64(l))
	}
	if m.NewOwner != nil {
		l = m.NewOwner.Size()
		n += 1 + l + sovRegistration(uint64(l))
	}
	if m.PreviousOwner != nil {
		l = m.PreviousOwner.Size()
		n += 1 + l + sovRegistration(uint64(l))
	}
	if m.CommitmentId != 0 {
		n += 1 + sovRegistration(uint64(m.CommitmentId))
	}
	if m.HijackFlag {
		n += 2
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovRegistration(uint64(l))
	}
	return n
}

func sovRegistration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegistration(x uint64) (n int) {
	return sovRegistration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AmendmentEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AmendmentEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AmendmentEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &types.Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewOwner == nil {
				m.NewOwner = &types.Actor{}
			}
			if err := m.NewOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousOwner == nil {
				m.PreviousOwner = &types.Actor{}
			}
			if err := m.PreviousOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitmentId", wireType)
			}
			m.CommitmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitmentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HijackFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HijackFlag = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &RecordMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegistration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegistration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegistration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegistration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegistration = fmt.Errorf("proto: unexpected end of group")
)
