// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcehub/acp/commitment.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/sourcenetwork/acp_core/pkg/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RegistrationProof models an opening proof for a RegistrationCommitment
type RegistrationProof struct {
	Object *types.Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// Hash of neighbors required to validate proof.
	//
	// Hashes must be ordered as a RFC6962 "merkle audit path"
	// https://www.rfc-editor.org/rfc/rfc6962#section-2.1.1
	MerkleProof [][]byte `protobuf:"bytes,2,rep,name=merkle_proof,json=merkleProof,proto3" json:"merkle_proof,omitempty"`
	LeafCount   uint64   `protobuf:"varint,3,opt,name=leaf_count,json=leafCount,proto3" json:"leaf_count,omitempty"`
	LeafIndex   uint64   `protobuf:"varint,4,opt,name=leaf_index,json=leafIndex,proto3" json:"leaf_index,omitempty"`
}

func (m *RegistrationProof) Reset()         { *m = RegistrationProof{} }
func (m *RegistrationProof) String() string { return proto.CompactTextString(m) }
func (*RegistrationProof) ProtoMessage()    {}
func (*RegistrationProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_6112833ff0b7565d, []int{0}
}
func (m *RegistrationProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistrationProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistrationProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistrationProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationProof.Merge(m, src)
}
func (m *RegistrationProof) XXX_Size() int {
	return m.Size()
}
func (m *RegistrationProof) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationProof.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationProof proto.InternalMessageInfo

func (m *RegistrationProof) GetObject() *types.Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *RegistrationProof) GetMerkleProof() [][]byte {
	if m != nil {
		return m.MerkleProof
	}
	return nil
}

func (m *RegistrationProof) GetLeafCount() uint64 {
	if m != nil {
		return m.LeafCount
	}
	return 0
}

func (m *RegistrationProof) GetLeafIndex() uint64 {
	if m != nil {
		return m.LeafIndex
	}
	return 0
}

// RegistrationsCommitment models a batched cryptographic commitment
// of a set of Object registrations issued by an Actor
type RegistrationsCommitment struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PolicyId string `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// commitment is a merkle root of registrations
	// TODO reference to doc containing commitment format
	Commitment []byte `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
	Expired    bool   `protobuf:"varint,4,opt,name=expired,proto3" json:"expired,omitempty"`
	// validity models the duration for which the commitment is valid for
	Validity *Duration       `protobuf:"bytes,5,opt,name=validity,proto3" json:"validity,omitempty"`
	Metadata *RecordMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *RegistrationsCommitment) Reset()         { *m = RegistrationsCommitment{} }
func (m *RegistrationsCommitment) String() string { return proto.CompactTextString(m) }
func (*RegistrationsCommitment) ProtoMessage()    {}
func (*RegistrationsCommitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_6112833ff0b7565d, []int{1}
}
func (m *RegistrationsCommitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistrationsCommitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistrationsCommitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistrationsCommitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationsCommitment.Merge(m, src)
}
func (m *RegistrationsCommitment) XXX_Size() int {
	return m.Size()
}
func (m *RegistrationsCommitment) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationsCommitment.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationsCommitment proto.InternalMessageInfo

func (m *RegistrationsCommitment) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RegistrationsCommitment) GetPolicyId() string {
	if m != nil {
		return m.PolicyId
	}
	return ""
}

func (m *RegistrationsCommitment) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *RegistrationsCommitment) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *RegistrationsCommitment) GetValidity() *Duration {
	if m != nil {
		return m.Validity
	}
	return nil
}

func (m *RegistrationsCommitment) GetMetadata() *RecordMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*RegistrationProof)(nil), "sourcehub.acp.RegistrationProof")
	proto.RegisterType((*RegistrationsCommitment)(nil), "sourcehub.acp.RegistrationsCommitment")
}

func init() { proto.RegisterFile("sourcehub/acp/commitment.proto", fileDescriptor_6112833ff0b7565d) }

var fileDescriptor_6112833ff0b7565d = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xbf, 0x6e, 0x13, 0x31,
	0x1c, 0x8e, 0xd3, 0x10, 0x12, 0x37, 0x20, 0xe1, 0xa5, 0x56, 0x50, 0xad, 0xd0, 0x29, 0x2c, 0x3e,
	0x89, 0x4a, 0x48, 0xac, 0x94, 0x81, 0x0e, 0x08, 0xe4, 0x91, 0xe5, 0xe4, 0xd8, 0xbf, 0xb6, 0xa6,
	0x77, 0x67, 0xcb, 0xe7, 0x83, 0xe4, 0x2d, 0x78, 0x10, 0x1e, 0x84, 0xb1, 0x23, 0x23, 0x4a, 0x5e,
	0x80, 0x47, 0x40, 0x67, 0xa7, 0x97, 0x5e, 0x47, 0x7f, 0xff, 0xf4, 0xe9, 0xf7, 0x19, 0xb3, 0xda,
	0x36, 0x5e, 0xc1, 0x4d, 0xb3, 0xca, 0xa4, 0x72, 0x99, 0xb2, 0x65, 0x69, 0x42, 0x09, 0x55, 0xe0,
	0xce, 0xdb, 0x60, 0xc9, 0xb3, 0x8e, 0xe7, 0x52, 0xb9, 0xf9, 0xeb, 0xf4, 0xac, 0x20, 0xfc, 0xb0,
	0xfe, 0xb6, 0xb5, 0xe4, 0xca, 0x7a, 0xc8, 0x3c, 0x14, 0x32, 0x18, 0x5b, 0xd5, 0x37, 0xc6, 0x25,
	0xe7, 0x7c, 0xde, 0x4f, 0xf6, 0xa0, 0xac, 0xd7, 0x7b, 0x8e, 0xf6, 0xb9, 0x60, 0x4a, 0x48, 0xcc,
	0xd9, 0x2f, 0x84, 0x5f, 0x08, 0xb8, 0x36, 0x75, 0xf0, 0x31, 0xf0, 0x8b, 0xb7, 0xf6, 0x8a, 0xbc,
	0xc5, 0x63, 0xbb, 0xfa, 0x06, 0x2a, 0x50, 0xb4, 0x40, 0xcb, 0xe3, 0x37, 0x8c, 0xf7, 0x7a, 0xf0,
	0xfb, 0x1e, 0xfc, 0x73, 0x54, 0x89, 0xbd, 0x9a, 0xbc, 0xc2, 0xb3, 0x12, 0xfc, 0x6d, 0x01, 0xb9,
	0x6b, 0x73, 0xe8, 0x70, 0x71, 0xb4, 0x9c, 0x89, 0xe3, 0x84, 0xa5, 0xe8, 0x53, 0x8c, 0x0b, 0x90,
	0x57, 0xb9, 0xb2, 0x4d, 0x15, 0xe8, 0xd1, 0x02, 0x2d, 0x47, 0x62, 0xda, 0x22, 0x17, 0x2d, 0xd0,
	0xd1, 0xa6, 0xd2, 0xb0, 0xa6, 0xa3, 0x03, 0x7d, 0xd9, 0x02, 0x67, 0xff, 0x10, 0x3e, 0x79, 0x58,
	0xb7, 0xbe, 0xe8, 0x0e, 0x48, 0x9e, 0xe3, 0xa1, 0xd1, 0xb1, 0xf0, 0x48, 0x0c, 0x8d, 0x26, 0x2f,
	0xf1, 0xd4, 0xd9, 0xc2, 0xa8, 0x4d, 0x6e, 0x34, 0x1d, 0x2e, 0xd0, 0x72, 0x2a, 0x26, 0x09, 0xb8,
	0xd4, 0x84, 0x61, 0x7c, 0xb8, 0x7d, 0xac, 0x31, 0x13, 0x0f, 0x10, 0x42, 0xf1, 0x53, 0x58, 0x3b,
	0xe3, 0x41, 0xc7, 0x12, 0x13, 0x71, 0xff, 0x24, 0xe7, 0x78, 0xf2, 0x5d, 0x16, 0x46, 0x9b, 0xb0,
	0xa1, 0x4f, 0xe2, 0x75, 0x4e, 0x78, 0x6f, 0x34, 0xfe, 0xa1, 0x49, 0xe5, 0x44, 0x27, 0x24, 0xef,
	0xf0, 0xa4, 0x84, 0x20, 0xb5, 0x0c, 0x92, 0x8e, 0xa3, 0xe9, 0xf4, 0x91, 0x49, 0xc4, 0xbd, 0x3e,
	0xed, 0x45, 0xa2, 0x93, 0xbf, 0xff, 0xf8, 0x7b, 0xcb, 0xd0, 0xdd, 0x96, 0xa1, 0xbf, 0x5b, 0x86,
	0x7e, 0xee, 0xd8, 0xe0, 0x6e, 0xc7, 0x06, 0x7f, 0x76, 0x6c, 0xf0, 0x95, 0x5f, 0x9b, 0xd0, 0xda,
	0x95, 0x2d, 0xb3, 0xfe, 0x3f, 0x39, 0xcc, 0xbd, 0x4e, 0x83, 0x6f, 0x1c, 0xd4, 0xab, 0x71, 0x9c,
	0xfc, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x4d, 0xe4, 0x1a, 0x84, 0x02, 0x00, 0x00,
}

func (m *RegistrationProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistrationProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistrationProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeafIndex != 0 {
		i = encodeVarintCommitment(dAtA, i, uint64(m.LeafIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.LeafCount != 0 {
		i = encodeVarintCommitment(dAtA, i, uint64(m.LeafCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MerkleProof) > 0 {
		for iNdEx := len(m.MerkleProof) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MerkleProof[iNdEx])
			copy(dAtA[i:], m.MerkleProof[iNdEx])
			i = encodeVarintCommitment(dAtA, i, uint64(len(m.MerkleProof[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommitment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistrationsCommitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistrationsCommitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistrationsCommitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommitment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Validity != nil {
		{
			size, err := m.Validity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommitment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Expired {
		i--
		if m.Expired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PolicyId) > 0 {
		i -= len(m.PolicyId)
		copy(dAtA[i:], m.PolicyId)
		i = encodeVarintCommitment(dAtA, i, uint64(len(m.PolicyId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCommitment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommitment(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommitment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegistrationProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovCommitment(uint64(l))
	}
	if len(m.MerkleProof) > 0 {
		for _, b := range m.MerkleProof {
			l = len(b)
			n += 1 + l + sovCommitment(uint64(l))
		}
	}
	if m.LeafCount != 0 {
		n += 1 + sovCommitment(uint64(m.LeafCount))
	}
	if m.LeafIndex != 0 {
		n += 1 + sovCommitment(uint64(m.LeafIndex))
	}
	return n
}

func (m *RegistrationsCommitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommitment(uint64(m.Id))
	}
	l = len(m.PolicyId)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovCommitment(uint64(l))
	}
	if m.Expired {
		n += 2
	}
	if m.Validity != nil {
		l = m.Validity.Size()
		n += 1 + l + sovCommitment(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCommitment(uint64(l))
	}
	return n
}

func sovCommitment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommitment(x uint64) (n int) {
	return sovCommitment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegistrationProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistrationProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistrationProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &types.Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleProof = append(m.MerkleProof, make([]byte, postIndex-iNdEx))
			copy(m.MerkleProof[len(m.MerkleProof)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafCount", wireType)
			}
			m.LeafCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeafCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafIndex", wireType)
			}
			m.LeafIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeafIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommitment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistrationsCommitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistrationsCommitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistrationsCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validity == nil {
				m.Validity = &Duration{}
			}
			if err := m.Validity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &RecordMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommitment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommitment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommitment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommitment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommitment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommitment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommitment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommitment = fmt.Errorf("proto: unexpected end of group")
)
