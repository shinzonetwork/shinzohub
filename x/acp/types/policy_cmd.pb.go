// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sourcehub/acp/policy_cmd.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	types "github.com/sourcenetwork/acp_core/pkg/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PolicyCmd models an operation to be performed against the context of a Policy
type PolicyCmd struct {
	// Types that are valid to be assigned to Cmd:
	//	*PolicyCmd_SetRelationshipCmd
	//	*PolicyCmd_DeleteRelationshipCmd
	//	*PolicyCmd_RegisterObjectCmd
	//	*PolicyCmd_ArchiveObjectCmd
	//	*PolicyCmd_CommitRegistrationsCmd
	//	*PolicyCmd_RevealRegistrationCmd
	//	*PolicyCmd_FlagHijackAttemptCmd
	//	*PolicyCmd_UnarchiveObjectCmd
	Cmd isPolicyCmd_Cmd `protobuf_oneof:"cmd"`
}

func (m *PolicyCmd) Reset()         { *m = PolicyCmd{} }
func (m *PolicyCmd) String() string { return proto.CompactTextString(m) }
func (*PolicyCmd) ProtoMessage()    {}
func (*PolicyCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{0}
}
func (m *PolicyCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyCmd.Merge(m, src)
}
func (m *PolicyCmd) XXX_Size() int {
	return m.Size()
}
func (m *PolicyCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyCmd proto.InternalMessageInfo

type isPolicyCmd_Cmd interface {
	isPolicyCmd_Cmd()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyCmd_SetRelationshipCmd struct {
	SetRelationshipCmd *SetRelationshipCmd `protobuf:"bytes,1,opt,name=set_relationship_cmd,json=setRelationshipCmd,proto3,oneof" json:"set_relationship_cmd,omitempty"`
}
type PolicyCmd_DeleteRelationshipCmd struct {
	DeleteRelationshipCmd *DeleteRelationshipCmd `protobuf:"bytes,2,opt,name=delete_relationship_cmd,json=deleteRelationshipCmd,proto3,oneof" json:"delete_relationship_cmd,omitempty"`
}
type PolicyCmd_RegisterObjectCmd struct {
	RegisterObjectCmd *RegisterObjectCmd `protobuf:"bytes,3,opt,name=register_object_cmd,json=registerObjectCmd,proto3,oneof" json:"register_object_cmd,omitempty"`
}
type PolicyCmd_ArchiveObjectCmd struct {
	ArchiveObjectCmd *ArchiveObjectCmd `protobuf:"bytes,4,opt,name=archive_object_cmd,json=archiveObjectCmd,proto3,oneof" json:"archive_object_cmd,omitempty"`
}
type PolicyCmd_CommitRegistrationsCmd struct {
	CommitRegistrationsCmd *CommitRegistrationsCmd `protobuf:"bytes,5,opt,name=commit_registrations_cmd,json=commitRegistrationsCmd,proto3,oneof" json:"commit_registrations_cmd,omitempty"`
}
type PolicyCmd_RevealRegistrationCmd struct {
	RevealRegistrationCmd *RevealRegistrationCmd `protobuf:"bytes,6,opt,name=reveal_registration_cmd,json=revealRegistrationCmd,proto3,oneof" json:"reveal_registration_cmd,omitempty"`
}
type PolicyCmd_FlagHijackAttemptCmd struct {
	FlagHijackAttemptCmd *FlagHijackAttemptCmd `protobuf:"bytes,7,opt,name=flag_hijack_attempt_cmd,json=flagHijackAttemptCmd,proto3,oneof" json:"flag_hijack_attempt_cmd,omitempty"`
}
type PolicyCmd_UnarchiveObjectCmd struct {
	UnarchiveObjectCmd *UnarchiveObjectCmd `protobuf:"bytes,8,opt,name=unarchive_object_cmd,json=unarchiveObjectCmd,proto3,oneof" json:"unarchive_object_cmd,omitempty"`
}

func (*PolicyCmd_SetRelationshipCmd) isPolicyCmd_Cmd()     {}
func (*PolicyCmd_DeleteRelationshipCmd) isPolicyCmd_Cmd()  {}
func (*PolicyCmd_RegisterObjectCmd) isPolicyCmd_Cmd()      {}
func (*PolicyCmd_ArchiveObjectCmd) isPolicyCmd_Cmd()       {}
func (*PolicyCmd_CommitRegistrationsCmd) isPolicyCmd_Cmd() {}
func (*PolicyCmd_RevealRegistrationCmd) isPolicyCmd_Cmd()  {}
func (*PolicyCmd_FlagHijackAttemptCmd) isPolicyCmd_Cmd()   {}
func (*PolicyCmd_UnarchiveObjectCmd) isPolicyCmd_Cmd()     {}

func (m *PolicyCmd) GetCmd() isPolicyCmd_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *PolicyCmd) GetSetRelationshipCmd() *SetRelationshipCmd {
	if x, ok := m.GetCmd().(*PolicyCmd_SetRelationshipCmd); ok {
		return x.SetRelationshipCmd
	}
	return nil
}

func (m *PolicyCmd) GetDeleteRelationshipCmd() *DeleteRelationshipCmd {
	if x, ok := m.GetCmd().(*PolicyCmd_DeleteRelationshipCmd); ok {
		return x.DeleteRelationshipCmd
	}
	return nil
}

func (m *PolicyCmd) GetRegisterObjectCmd() *RegisterObjectCmd {
	if x, ok := m.GetCmd().(*PolicyCmd_RegisterObjectCmd); ok {
		return x.RegisterObjectCmd
	}
	return nil
}

func (m *PolicyCmd) GetArchiveObjectCmd() *ArchiveObjectCmd {
	if x, ok := m.GetCmd().(*PolicyCmd_ArchiveObjectCmd); ok {
		return x.ArchiveObjectCmd
	}
	return nil
}

func (m *PolicyCmd) GetCommitRegistrationsCmd() *CommitRegistrationsCmd {
	if x, ok := m.GetCmd().(*PolicyCmd_CommitRegistrationsCmd); ok {
		return x.CommitRegistrationsCmd
	}
	return nil
}

func (m *PolicyCmd) GetRevealRegistrationCmd() *RevealRegistrationCmd {
	if x, ok := m.GetCmd().(*PolicyCmd_RevealRegistrationCmd); ok {
		return x.RevealRegistrationCmd
	}
	return nil
}

func (m *PolicyCmd) GetFlagHijackAttemptCmd() *FlagHijackAttemptCmd {
	if x, ok := m.GetCmd().(*PolicyCmd_FlagHijackAttemptCmd); ok {
		return x.FlagHijackAttemptCmd
	}
	return nil
}

func (m *PolicyCmd) GetUnarchiveObjectCmd() *UnarchiveObjectCmd {
	if x, ok := m.GetCmd().(*PolicyCmd_UnarchiveObjectCmd); ok {
		return x.UnarchiveObjectCmd
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PolicyCmd) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PolicyCmd_SetRelationshipCmd)(nil),
		(*PolicyCmd_DeleteRelationshipCmd)(nil),
		(*PolicyCmd_RegisterObjectCmd)(nil),
		(*PolicyCmd_ArchiveObjectCmd)(nil),
		(*PolicyCmd_CommitRegistrationsCmd)(nil),
		(*PolicyCmd_RevealRegistrationCmd)(nil),
		(*PolicyCmd_FlagHijackAttemptCmd)(nil),
		(*PolicyCmd_UnarchiveObjectCmd)(nil),
	}
}

// SetRelationship creates or updates a Relationship within a Policy
// A Relationship is a statement which ties together an object and a subjecto with a "relation",
// which means the set of high level rules defined in the Policy will apply to these entities.
type SetRelationshipCmd struct {
	Relationship *types.Relationship `protobuf:"bytes,1,opt,name=relationship,proto3" json:"relationship,omitempty"`
}

func (m *SetRelationshipCmd) Reset()         { *m = SetRelationshipCmd{} }
func (m *SetRelationshipCmd) String() string { return proto.CompactTextString(m) }
func (*SetRelationshipCmd) ProtoMessage()    {}
func (*SetRelationshipCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{1}
}
func (m *SetRelationshipCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetRelationshipCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetRelationshipCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetRelationshipCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRelationshipCmd.Merge(m, src)
}
func (m *SetRelationshipCmd) XXX_Size() int {
	return m.Size()
}
func (m *SetRelationshipCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRelationshipCmd.DiscardUnknown(m)
}

var xxx_messageInfo_SetRelationshipCmd proto.InternalMessageInfo

func (m *SetRelationshipCmd) GetRelationship() *types.Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

// DelereRelationship removes a Relationship from a Policy.
// If the Relationship was not found in a Policy, this Cmd is a no-op.
type DeleteRelationshipCmd struct {
	Relationship *types.Relationship `protobuf:"bytes,1,opt,name=relationship,proto3" json:"relationship,omitempty"`
}

func (m *DeleteRelationshipCmd) Reset()         { *m = DeleteRelationshipCmd{} }
func (m *DeleteRelationshipCmd) String() string { return proto.CompactTextString(m) }
func (*DeleteRelationshipCmd) ProtoMessage()    {}
func (*DeleteRelationshipCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{2}
}
func (m *DeleteRelationshipCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRelationshipCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRelationshipCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRelationshipCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelationshipCmd.Merge(m, src)
}
func (m *DeleteRelationshipCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRelationshipCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelationshipCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelationshipCmd proto.InternalMessageInfo

func (m *DeleteRelationshipCmd) GetRelationship() *types.Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

// RegisterObject creates a special kind of Relationship within a Policy which ties
// the msg's Actor as the owner of the msg's Object.
// The Owner has complete control over the set of subjects that are related to their Object,
// giving them autonomy to share the object and revoke acces to the object,
// much like owners in a Discretionary Access Control model.
//
// Attempting to register a previously registered Object is an error,
// Object IDs are therefore assumed to be unique within a Policy.
type RegisterObjectCmd struct {
	Object *types.Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *RegisterObjectCmd) Reset()         { *m = RegisterObjectCmd{} }
func (m *RegisterObjectCmd) String() string { return proto.CompactTextString(m) }
func (*RegisterObjectCmd) ProtoMessage()    {}
func (*RegisterObjectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{3}
}
func (m *RegisterObjectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterObjectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterObjectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterObjectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterObjectCmd.Merge(m, src)
}
func (m *RegisterObjectCmd) XXX_Size() int {
	return m.Size()
}
func (m *RegisterObjectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterObjectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterObjectCmd proto.InternalMessageInfo

func (m *RegisterObjectCmd) GetObject() *types.Object {
	if m != nil {
		return m.Object
	}
	return nil
}

// CommitRegistrationsCmd creates a new batched commitment to a set of Object registrations
type CommitRegistrationsCmd struct {
	Commitment []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (m *CommitRegistrationsCmd) Reset()         { *m = CommitRegistrationsCmd{} }
func (m *CommitRegistrationsCmd) String() string { return proto.CompactTextString(m) }
func (*CommitRegistrationsCmd) ProtoMessage()    {}
func (*CommitRegistrationsCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{4}
}
func (m *CommitRegistrationsCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitRegistrationsCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitRegistrationsCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitRegistrationsCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRegistrationsCmd.Merge(m, src)
}
func (m *CommitRegistrationsCmd) XXX_Size() int {
	return m.Size()
}
func (m *CommitRegistrationsCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRegistrationsCmd.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRegistrationsCmd proto.InternalMessageInfo

func (m *CommitRegistrationsCmd) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

type CommitRegistrationsCmdResult struct {
	RegistrationsCommitment *RegistrationsCommitment `protobuf:"bytes,1,opt,name=registrations_commitment,json=registrationsCommitment,proto3" json:"registrations_commitment,omitempty"`
}

func (m *CommitRegistrationsCmdResult) Reset()         { *m = CommitRegistrationsCmdResult{} }
func (m *CommitRegistrationsCmdResult) String() string { return proto.CompactTextString(m) }
func (*CommitRegistrationsCmdResult) ProtoMessage()    {}
func (*CommitRegistrationsCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{5}
}
func (m *CommitRegistrationsCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitRegistrationsCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitRegistrationsCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitRegistrationsCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRegistrationsCmdResult.Merge(m, src)
}
func (m *CommitRegistrationsCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *CommitRegistrationsCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRegistrationsCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRegistrationsCmdResult proto.InternalMessageInfo

func (m *CommitRegistrationsCmdResult) GetRegistrationsCommitment() *RegistrationsCommitment {
	if m != nil {
		return m.RegistrationsCommitment
	}
	return nil
}

type RevealRegistrationCmd struct {
	RegistrationsCommitmentId uint64             `protobuf:"varint,1,opt,name=registrations_commitment_id,json=registrationsCommitmentId,proto3" json:"registrations_commitment_id,omitempty"`
	Proof                     *RegistrationProof `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *RevealRegistrationCmd) Reset()         { *m = RevealRegistrationCmd{} }
func (m *RevealRegistrationCmd) String() string { return proto.CompactTextString(m) }
func (*RevealRegistrationCmd) ProtoMessage()    {}
func (*RevealRegistrationCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{6}
}
func (m *RevealRegistrationCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevealRegistrationCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevealRegistrationCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevealRegistrationCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevealRegistrationCmd.Merge(m, src)
}
func (m *RevealRegistrationCmd) XXX_Size() int {
	return m.Size()
}
func (m *RevealRegistrationCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_RevealRegistrationCmd.DiscardUnknown(m)
}

var xxx_messageInfo_RevealRegistrationCmd proto.InternalMessageInfo

func (m *RevealRegistrationCmd) GetRegistrationsCommitmentId() uint64 {
	if m != nil {
		return m.RegistrationsCommitmentId
	}
	return 0
}

func (m *RevealRegistrationCmd) GetProof() *RegistrationProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type RevealRegistrationCmdResult struct {
	Record *RelationshipRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	Event  *AmendmentEvent     `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *RevealRegistrationCmdResult) Reset()         { *m = RevealRegistrationCmdResult{} }
func (m *RevealRegistrationCmdResult) String() string { return proto.CompactTextString(m) }
func (*RevealRegistrationCmdResult) ProtoMessage()    {}
func (*RevealRegistrationCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{7}
}
func (m *RevealRegistrationCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevealRegistrationCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevealRegistrationCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevealRegistrationCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevealRegistrationCmdResult.Merge(m, src)
}
func (m *RevealRegistrationCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *RevealRegistrationCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RevealRegistrationCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_RevealRegistrationCmdResult proto.InternalMessageInfo

func (m *RevealRegistrationCmdResult) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *RevealRegistrationCmdResult) GetEvent() *AmendmentEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

type FlagHijackAttemptCmd struct {
	EventId uint64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *FlagHijackAttemptCmd) Reset()         { *m = FlagHijackAttemptCmd{} }
func (m *FlagHijackAttemptCmd) String() string { return proto.CompactTextString(m) }
func (*FlagHijackAttemptCmd) ProtoMessage()    {}
func (*FlagHijackAttemptCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{8}
}
func (m *FlagHijackAttemptCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlagHijackAttemptCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlagHijackAttemptCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlagHijackAttemptCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlagHijackAttemptCmd.Merge(m, src)
}
func (m *FlagHijackAttemptCmd) XXX_Size() int {
	return m.Size()
}
func (m *FlagHijackAttemptCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_FlagHijackAttemptCmd.DiscardUnknown(m)
}

var xxx_messageInfo_FlagHijackAttemptCmd proto.InternalMessageInfo

func (m *FlagHijackAttemptCmd) GetEventId() uint64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

type FlagHijackAttemptCmdResult struct {
	Event *AmendmentEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *FlagHijackAttemptCmdResult) Reset()         { *m = FlagHijackAttemptCmdResult{} }
func (m *FlagHijackAttemptCmdResult) String() string { return proto.CompactTextString(m) }
func (*FlagHijackAttemptCmdResult) ProtoMessage()    {}
func (*FlagHijackAttemptCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{9}
}
func (m *FlagHijackAttemptCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlagHijackAttemptCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlagHijackAttemptCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlagHijackAttemptCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlagHijackAttemptCmdResult.Merge(m, src)
}
func (m *FlagHijackAttemptCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *FlagHijackAttemptCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FlagHijackAttemptCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_FlagHijackAttemptCmdResult proto.InternalMessageInfo

func (m *FlagHijackAttemptCmdResult) GetEvent() *AmendmentEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

type UnarchiveObjectCmd struct {
	Object *types.Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *UnarchiveObjectCmd) Reset()         { *m = UnarchiveObjectCmd{} }
func (m *UnarchiveObjectCmd) String() string { return proto.CompactTextString(m) }
func (*UnarchiveObjectCmd) ProtoMessage()    {}
func (*UnarchiveObjectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{10}
}
func (m *UnarchiveObjectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnarchiveObjectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnarchiveObjectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnarchiveObjectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnarchiveObjectCmd.Merge(m, src)
}
func (m *UnarchiveObjectCmd) XXX_Size() int {
	return m.Size()
}
func (m *UnarchiveObjectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_UnarchiveObjectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_UnarchiveObjectCmd proto.InternalMessageInfo

func (m *UnarchiveObjectCmd) GetObject() *types.Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type UnarchiveObjectCmdResult struct {
	Record               *RelationshipRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	RelationshipModified bool                `protobuf:"varint,2,opt,name=relationship_modified,json=relationshipModified,proto3" json:"relationship_modified,omitempty"`
}

func (m *UnarchiveObjectCmdResult) Reset()         { *m = UnarchiveObjectCmdResult{} }
func (m *UnarchiveObjectCmdResult) String() string { return proto.CompactTextString(m) }
func (*UnarchiveObjectCmdResult) ProtoMessage()    {}
func (*UnarchiveObjectCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{11}
}
func (m *UnarchiveObjectCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnarchiveObjectCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnarchiveObjectCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnarchiveObjectCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnarchiveObjectCmdResult.Merge(m, src)
}
func (m *UnarchiveObjectCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *UnarchiveObjectCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UnarchiveObjectCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_UnarchiveObjectCmdResult proto.InternalMessageInfo

func (m *UnarchiveObjectCmdResult) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *UnarchiveObjectCmdResult) GetRelationshipModified() bool {
	if m != nil {
		return m.RelationshipModified
	}
	return false
}

// ArchiveObject let's an Object's Owner effectively "unshare" their Object.
// This method wipes all Relationships referencing the given Object.
//
// A caveat is that after removing the Relationships, a record of the original Object owner
// is maintained to prevent an "ownership hijack" attack.
//
// Suppose Bob owns object Foo, which is shared with Bob but not Eve.
// Eve wants to access Foo but was not given permission to, they could "hijack" Bob's object by waiting for Bob to Archive Foo,
// then submitting a RegisterObject Msg, effectively becoming Foo's new owner.
// If Charlie has a copy of the object, Eve could convince Charlie to share his copy, granting Eve access to Foo.
// The previous scenario where an unauthorized user is able to claim ownership to data previously unaccessible to them
// is an "ownership hijack".
type ArchiveObjectCmd struct {
	Object *types.Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *ArchiveObjectCmd) Reset()         { *m = ArchiveObjectCmd{} }
func (m *ArchiveObjectCmd) String() string { return proto.CompactTextString(m) }
func (*ArchiveObjectCmd) ProtoMessage()    {}
func (*ArchiveObjectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{12}
}
func (m *ArchiveObjectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveObjectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveObjectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveObjectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveObjectCmd.Merge(m, src)
}
func (m *ArchiveObjectCmd) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveObjectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveObjectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveObjectCmd proto.InternalMessageInfo

func (m *ArchiveObjectCmd) GetObject() *types.Object {
	if m != nil {
		return m.Object
	}
	return nil
}

// SetRelationshipCmd sets a Relationship in a Policy
type SetRelationshipCmdResult struct {
	// Indicates whether the given Relationship previously existed, ie the Tx was a no op
	RecordExisted bool                `protobuf:"varint,1,opt,name=record_existed,json=recordExisted,proto3" json:"record_existed,omitempty"`
	Record        *RelationshipRecord `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *SetRelationshipCmdResult) Reset()         { *m = SetRelationshipCmdResult{} }
func (m *SetRelationshipCmdResult) String() string { return proto.CompactTextString(m) }
func (*SetRelationshipCmdResult) ProtoMessage()    {}
func (*SetRelationshipCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{13}
}
func (m *SetRelationshipCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetRelationshipCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetRelationshipCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetRelationshipCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRelationshipCmdResult.Merge(m, src)
}
func (m *SetRelationshipCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *SetRelationshipCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRelationshipCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_SetRelationshipCmdResult proto.InternalMessageInfo

func (m *SetRelationshipCmdResult) GetRecordExisted() bool {
	if m != nil {
		return m.RecordExisted
	}
	return false
}

func (m *SetRelationshipCmdResult) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

// DeleteRelationshipCmdResult removes a Relationship in a Policy
type DeleteRelationshipCmdResult struct {
	RecordFound bool `protobuf:"varint,1,opt,name=record_found,json=recordFound,proto3" json:"record_found,omitempty"`
}

func (m *DeleteRelationshipCmdResult) Reset()         { *m = DeleteRelationshipCmdResult{} }
func (m *DeleteRelationshipCmdResult) String() string { return proto.CompactTextString(m) }
func (*DeleteRelationshipCmdResult) ProtoMessage()    {}
func (*DeleteRelationshipCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{14}
}
func (m *DeleteRelationshipCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRelationshipCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRelationshipCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRelationshipCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelationshipCmdResult.Merge(m, src)
}
func (m *DeleteRelationshipCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRelationshipCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelationshipCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelationshipCmdResult proto.InternalMessageInfo

func (m *DeleteRelationshipCmdResult) GetRecordFound() bool {
	if m != nil {
		return m.RecordFound
	}
	return false
}

// RegisterObjectCmdResult registers an Object in a Policy
type RegisterObjectCmdResult struct {
	Record *RelationshipRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *RegisterObjectCmdResult) Reset()         { *m = RegisterObjectCmdResult{} }
func (m *RegisterObjectCmdResult) String() string { return proto.CompactTextString(m) }
func (*RegisterObjectCmdResult) ProtoMessage()    {}
func (*RegisterObjectCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{15}
}
func (m *RegisterObjectCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterObjectCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterObjectCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterObjectCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterObjectCmdResult.Merge(m, src)
}
func (m *RegisterObjectCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *RegisterObjectCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterObjectCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterObjectCmdResult proto.InternalMessageInfo

func (m *RegisterObjectCmdResult) GetRecord() *RelationshipRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

// ArchiveObjectCmdResult unregisters an Object in a Policy
type ArchiveObjectCmdResult struct {
	Found                bool   `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	RelationshipsRemoved uint64 `protobuf:"varint,2,opt,name=relationships_removed,json=relationshipsRemoved,proto3" json:"relationships_removed,omitempty"`
}

func (m *ArchiveObjectCmdResult) Reset()         { *m = ArchiveObjectCmdResult{} }
func (m *ArchiveObjectCmdResult) String() string { return proto.CompactTextString(m) }
func (*ArchiveObjectCmdResult) ProtoMessage()    {}
func (*ArchiveObjectCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{16}
}
func (m *ArchiveObjectCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveObjectCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveObjectCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveObjectCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveObjectCmdResult.Merge(m, src)
}
func (m *ArchiveObjectCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveObjectCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveObjectCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveObjectCmdResult proto.InternalMessageInfo

func (m *ArchiveObjectCmdResult) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *ArchiveObjectCmdResult) GetRelationshipsRemoved() uint64 {
	if m != nil {
		return m.RelationshipsRemoved
	}
	return 0
}

type PolicyCmdResult struct {
	// Types that are valid to be assigned to Result:
	//
	//	*PolicyCmdResult_SetRelationshipResult
	//	*PolicyCmdResult_DeleteRelationshipResult
	//	*PolicyCmdResult_RegisterObjectResult
	//	*PolicyCmdResult_ArchiveObjectResult
	//	*PolicyCmdResult_CommitRegistrationsResult
	//	*PolicyCmdResult_RevealRegistrationResult
	//	*PolicyCmdResult_FlagHijackAttemptResult
	//	*PolicyCmdResult_UnarchiveObjectResult
	Result isPolicyCmdResult_Result `protobuf_oneof:"result"`
}

func (m *PolicyCmdResult) Reset()         { *m = PolicyCmdResult{} }
func (m *PolicyCmdResult) String() string { return proto.CompactTextString(m) }
func (*PolicyCmdResult) ProtoMessage()    {}
func (*PolicyCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de5e9736122d1ff, []int{17}
}
func (m *PolicyCmdResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyCmdResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyCmdResult.Merge(m, src)
}
func (m *PolicyCmdResult) XXX_Size() int {
	return m.Size()
}
func (m *PolicyCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyCmdResult proto.InternalMessageInfo

type isPolicyCmdResult_Result interface {
	isPolicyCmdResult_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyCmdResult_SetRelationshipResult struct {
	SetRelationshipResult *SetRelationshipCmdResult `protobuf:"bytes,1,opt,name=set_relationship_result,json=setRelationshipResult,proto3,oneof" json:"set_relationship_result,omitempty"`
}
type PolicyCmdResult_DeleteRelationshipResult struct {
	DeleteRelationshipResult *DeleteRelationshipCmdResult `protobuf:"bytes,2,opt,name=delete_relationship_result,json=deleteRelationshipResult,proto3,oneof" json:"delete_relationship_result,omitempty"`
}
type PolicyCmdResult_RegisterObjectResult struct {
	RegisterObjectResult *RegisterObjectCmdResult `protobuf:"bytes,3,opt,name=register_object_result,json=registerObjectResult,proto3,oneof" json:"register_object_result,omitempty"`
}
type PolicyCmdResult_ArchiveObjectResult struct {
	ArchiveObjectResult *ArchiveObjectCmdResult `protobuf:"bytes,4,opt,name=archive_object_result,json=archiveObjectResult,proto3,oneof" json:"archive_object_result,omitempty"`
}
type PolicyCmdResult_CommitRegistrationsResult struct {
	CommitRegistrationsResult *CommitRegistrationsCmdResult `protobuf:"bytes,5,opt,name=commit_registrations_result,json=commitRegistrationsResult,proto3,oneof" json:"commit_registrations_result,omitempty"`
}
type PolicyCmdResult_RevealRegistrationResult struct {
	RevealRegistrationResult *RevealRegistrationCmdResult `protobuf:"bytes,6,opt,name=reveal_registration_result,json=revealRegistrationResult,proto3,oneof" json:"reveal_registration_result,omitempty"`
}
type PolicyCmdResult_FlagHijackAttemptResult struct {
	FlagHijackAttemptResult *FlagHijackAttemptCmdResult `protobuf:"bytes,7,opt,name=flag_hijack_attempt_result,json=flagHijackAttemptResult,proto3,oneof" json:"flag_hijack_attempt_result,omitempty"`
}
type PolicyCmdResult_UnarchiveObjectResult struct {
	UnarchiveObjectResult *UnarchiveObjectCmdResult `protobuf:"bytes,8,opt,name=unarchive_object_result,json=unarchiveObjectResult,proto3,oneof" json:"unarchive_object_result,omitempty"`
}

func (*PolicyCmdResult_SetRelationshipResult) isPolicyCmdResult_Result()     {}
func (*PolicyCmdResult_DeleteRelationshipResult) isPolicyCmdResult_Result()  {}
func (*PolicyCmdResult_RegisterObjectResult) isPolicyCmdResult_Result()      {}
func (*PolicyCmdResult_ArchiveObjectResult) isPolicyCmdResult_Result()       {}
func (*PolicyCmdResult_CommitRegistrationsResult) isPolicyCmdResult_Result() {}
func (*PolicyCmdResult_RevealRegistrationResult) isPolicyCmdResult_Result()  {}
func (*PolicyCmdResult_FlagHijackAttemptResult) isPolicyCmdResult_Result()   {}
func (*PolicyCmdResult_UnarchiveObjectResult) isPolicyCmdResult_Result()     {}

func (m *PolicyCmdResult) GetResult() isPolicyCmdResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *PolicyCmdResult) GetSetRelationshipResult() *SetRelationshipCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_SetRelationshipResult); ok {
		return x.SetRelationshipResult
	}
	return nil
}

func (m *PolicyCmdResult) GetDeleteRelationshipResult() *DeleteRelationshipCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_DeleteRelationshipResult); ok {
		return x.DeleteRelationshipResult
	}
	return nil
}

func (m *PolicyCmdResult) GetRegisterObjectResult() *RegisterObjectCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_RegisterObjectResult); ok {
		return x.RegisterObjectResult
	}
	return nil
}

func (m *PolicyCmdResult) GetArchiveObjectResult() *ArchiveObjectCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_ArchiveObjectResult); ok {
		return x.ArchiveObjectResult
	}
	return nil
}

func (m *PolicyCmdResult) GetCommitRegistrationsResult() *CommitRegistrationsCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_CommitRegistrationsResult); ok {
		return x.CommitRegistrationsResult
	}
	return nil
}

func (m *PolicyCmdResult) GetRevealRegistrationResult() *RevealRegistrationCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_RevealRegistrationResult); ok {
		return x.RevealRegistrationResult
	}
	return nil
}

func (m *PolicyCmdResult) GetFlagHijackAttemptResult() *FlagHijackAttemptCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_FlagHijackAttemptResult); ok {
		return x.FlagHijackAttemptResult
	}
	return nil
}

func (m *PolicyCmdResult) GetUnarchiveObjectResult() *UnarchiveObjectCmdResult {
	if x, ok := m.GetResult().(*PolicyCmdResult_UnarchiveObjectResult); ok {
		return x.UnarchiveObjectResult
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PolicyCmdResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PolicyCmdResult_SetRelationshipResult)(nil),
		(*PolicyCmdResult_DeleteRelationshipResult)(nil),
		(*PolicyCmdResult_RegisterObjectResult)(nil),
		(*PolicyCmdResult_ArchiveObjectResult)(nil),
		(*PolicyCmdResult_CommitRegistrationsResult)(nil),
		(*PolicyCmdResult_RevealRegistrationResult)(nil),
		(*PolicyCmdResult_FlagHijackAttemptResult)(nil),
		(*PolicyCmdResult_UnarchiveObjectResult)(nil),
	}
}

func init() {
	proto.RegisterType((*PolicyCmd)(nil), "sourcehub.acp.PolicyCmd")
	proto.RegisterType((*SetRelationshipCmd)(nil), "sourcehub.acp.SetRelationshipCmd")
	proto.RegisterType((*DeleteRelationshipCmd)(nil), "sourcehub.acp.DeleteRelationshipCmd")
	proto.RegisterType((*RegisterObjectCmd)(nil), "sourcehub.acp.RegisterObjectCmd")
	proto.RegisterType((*CommitRegistrationsCmd)(nil), "sourcehub.acp.CommitRegistrationsCmd")
	proto.RegisterType((*CommitRegistrationsCmdResult)(nil), "sourcehub.acp.CommitRegistrationsCmdResult")
	proto.RegisterType((*RevealRegistrationCmd)(nil), "sourcehub.acp.RevealRegistrationCmd")
	proto.RegisterType((*RevealRegistrationCmdResult)(nil), "sourcehub.acp.RevealRegistrationCmdResult")
	proto.RegisterType((*FlagHijackAttemptCmd)(nil), "sourcehub.acp.FlagHijackAttemptCmd")
	proto.RegisterType((*FlagHijackAttemptCmdResult)(nil), "sourcehub.acp.FlagHijackAttemptCmdResult")
	proto.RegisterType((*UnarchiveObjectCmd)(nil), "sourcehub.acp.UnarchiveObjectCmd")
	proto.RegisterType((*UnarchiveObjectCmdResult)(nil), "sourcehub.acp.UnarchiveObjectCmdResult")
	proto.RegisterType((*ArchiveObjectCmd)(nil), "sourcehub.acp.ArchiveObjectCmd")
	proto.RegisterType((*SetRelationshipCmdResult)(nil), "sourcehub.acp.SetRelationshipCmdResult")
	proto.RegisterType((*DeleteRelationshipCmdResult)(nil), "sourcehub.acp.DeleteRelationshipCmdResult")
	proto.RegisterType((*RegisterObjectCmdResult)(nil), "sourcehub.acp.RegisterObjectCmdResult")
	proto.RegisterType((*ArchiveObjectCmdResult)(nil), "sourcehub.acp.ArchiveObjectCmdResult")
	proto.RegisterType((*PolicyCmdResult)(nil), "sourcehub.acp.PolicyCmdResult")
}

func init() { proto.RegisterFile("sourcehub/acp/policy_cmd.proto", fileDescriptor_1de5e9736122d1ff) }

var fileDescriptor_1de5e9736122d1ff = []byte{
	// 1007 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xf6, 0x36, 0xb1, 0x6b, 0xde, 0xb4, 0xd0, 0x4e, 0xed, 0xd8, 0x71, 0x60, 0x9b, 0x2e, 0x14,
	0x28, 0x48, 0xb6, 0x68, 0x25, 0x04, 0x17, 0x44, 0x1a, 0x5a, 0xb9, 0x7c, 0xa8, 0x65, 0xa0, 0x17,
	0x40, 0x59, 0x6d, 0x76, 0xc7, 0xf6, 0xa6, 0x5e, 0x8f, 0x35, 0x3b, 0x0e, 0xad, 0xc4, 0x85, 0x2b,
	0x12, 0x82, 0x9f, 0xc5, 0x8d, 0x1e, 0x39, 0xa2, 0x44, 0xe2, 0x77, 0xa0, 0xf9, 0xb0, 0xbd, 0x3b,
	0x33, 0x0e, 0x29, 0xcd, 0xcd, 0x9e, 0xf7, 0xd9, 0xe7, 0xfd, 0x9c, 0x77, 0x9f, 0x05, 0x3f, 0xa7,
	0x33, 0x16, 0x93, 0xd1, 0xec, 0xa0, 0x17, 0xc5, 0xd3, 0xde, 0x94, 0x8e, 0xd3, 0xf8, 0x59, 0x18,
	0x67, 0x49, 0x77, 0xca, 0x28, 0xa7, 0xe8, 0xf2, 0xc2, 0xde, 0x8d, 0xe2, 0x69, 0xe7, 0xfa, 0x90,
	0xd2, 0xe1, 0x98, 0xf4, 0xa4, 0xf1, 0x60, 0x36, 0xe8, 0xf1, 0x34, 0x23, 0x39, 0x8f, 0xb2, 0xa9,
	0xc2, 0x77, 0x6e, 0x29, 0xfc, 0x84, 0xf0, 0x1f, 0x29, 0x7b, 0x22, 0x38, 0xc3, 0x98, 0x32, 0xd2,
	0x63, 0x64, 0x1c, 0xf1, 0x94, 0x4e, 0xf2, 0x51, 0x3a, 0x87, 0x1a, 0xae, 0x63, 0x9a, 0x65, 0x29,
	0xcf, 0xc8, 0x84, 0x6b, 0xfb, 0x4e, 0xd9, 0xce, 0xc8, 0x30, 0xcd, 0x39, 0x93, 0x2c, 0x1a, 0xd1,
	0x31, 0x11, 0x31, 0x65, 0x3a, 0xf0, 0xe0, 0x9f, 0x2a, 0xbc, 0xf2, 0x48, 0x66, 0xb3, 0x97, 0x25,
	0xe8, 0x31, 0x34, 0x72, 0xc2, 0xc3, 0x62, 0x14, 0x22, 0xc9, 0xb6, 0xb7, 0xe3, 0xbd, 0xbb, 0x71,
	0xfb, 0x46, 0xb7, 0x94, 0x65, 0xf7, 0x1b, 0xc2, 0x71, 0x01, 0xb9, 0x97, 0x25, 0xfd, 0x0a, 0x46,
	0xb9, 0x75, 0x8a, 0xf6, 0xa1, 0x95, 0x90, 0x31, 0xe1, 0xc4, 0x66, 0xbe, 0x20, 0x99, 0xdf, 0x32,
	0x98, 0x3f, 0x93, 0x68, 0x9b, 0xbc, 0x99, 0xb8, 0x0c, 0x08, 0xc3, 0x35, 0x95, 0x36, 0x61, 0x21,
	0x3d, 0x38, 0x24, 0x31, 0x97, 0xdc, 0x6b, 0x92, 0x7b, 0xc7, 0xe0, 0xc6, 0x1a, 0xf9, 0x50, 0x02,
	0x15, 0xef, 0x55, 0x66, 0x1e, 0xa2, 0x87, 0x80, 0x22, 0x16, 0x8f, 0xd2, 0x23, 0x52, 0xa4, 0x5c,
	0x97, 0x94, 0xd7, 0x0d, 0xca, 0x5d, 0x05, 0x2c, 0x32, 0x5e, 0x89, 0x8c, 0x33, 0x14, 0x41, 0x5b,
	0xf5, 0x2e, 0x2c, 0xb6, 0x28, 0x97, 0xb4, 0x55, 0x49, 0x7b, 0xd3, 0xa0, 0xdd, 0x93, 0x70, 0x5c,
	0x44, 0x2b, 0xf2, 0xcd, 0xd8, 0x69, 0x11, 0x75, 0x66, 0xe4, 0x88, 0x44, 0xe3, 0x92, 0x0b, 0xe9,
	0xa1, 0xe6, 0xac, 0x33, 0x96, 0xe8, 0x22, 0x8f, 0xae, 0x33, 0x73, 0x19, 0xd0, 0x0f, 0xd0, 0x1a,
	0x8c, 0xa3, 0x61, 0x38, 0x4a, 0x0f, 0xa3, 0xf8, 0x49, 0x18, 0x71, 0x4e, 0xb2, 0xa9, 0x2a, 0xcc,
	0x45, 0xc9, 0xff, 0xa6, 0xc1, 0x7f, 0x7f, 0x1c, 0x0d, 0xfb, 0x12, 0xbc, 0xab, 0xb0, 0x8a, 0xbe,
	0x31, 0x70, 0x9c, 0x8b, 0xe1, 0x9b, 0x4d, 0x1c, 0x35, 0xaf, 0x3b, 0x87, 0xef, 0xf1, 0x24, 0xb2,
	0xab, 0x8e, 0x66, 0xd6, 0xe9, 0xdd, 0x2a, 0xac, 0xc5, 0x59, 0x12, 0xec, 0x03, 0xb2, 0xe7, 0x15,
	0xf5, 0xe1, 0x52, 0x71, 0x24, 0xf5, 0xa0, 0xcf, 0xcb, 0xa4, 0xaf, 0x67, 0x77, 0x7e, 0x3d, 0xbb,
	0xc5, 0xc7, 0x71, 0xe9, 0xc9, 0x20, 0x82, 0xa6, 0x73, 0x6a, 0xcf, 0xd1, 0xc5, 0x17, 0x70, 0xd5,
	0x1a, 0x5e, 0xf4, 0x21, 0xd4, 0x54, 0xad, 0x34, 0xb1, 0xbf, 0x8a, 0x58, 0x3d, 0x82, 0x35, 0x3a,
	0xf8, 0x08, 0x36, 0xdd, 0xf3, 0x85, 0x7c, 0x80, 0xe5, 0x92, 0x91, 0xac, 0x97, 0x70, 0xe1, 0x24,
	0xf8, 0xd9, 0x83, 0xd7, 0xdd, 0x8f, 0x62, 0x92, 0xcf, 0xc6, 0x5c, 0x4c, 0xba, 0x31, 0xe2, 0x65,
	0xba, 0x8d, 0xdb, 0x6f, 0x3b, 0xef, 0xe4, 0x9c, 0x68, 0x81, 0xc6, 0x2d, 0xe6, 0x36, 0x04, 0xbf,
	0x79, 0xd0, 0x74, 0x0e, 0x2f, 0xfa, 0x04, 0xb6, 0x57, 0x39, 0x0f, 0x53, 0xb5, 0xc9, 0xd6, 0xf1,
	0xd6, 0x0a, 0xde, 0x07, 0xa2, 0x9e, 0xd5, 0x29, 0xa3, 0x74, 0xa0, 0x37, 0xd3, 0xce, 0x29, 0x91,
	0x3e, 0x12, 0x38, 0xac, 0xe0, 0xc1, 0xaf, 0x1e, 0x6c, 0x3b, 0x23, 0xd2, 0x45, 0xf9, 0x18, 0x6a,
	0x6a, 0xf1, 0xae, 0x58, 0xa6, 0xa5, 0xbe, 0x4b, 0x20, 0xd6, 0x0f, 0xa0, 0x3b, 0x50, 0x25, 0x47,
	0xa2, 0x78, 0x2a, 0xa4, 0x37, 0xcc, 0xed, 0x93, 0x91, 0x49, 0x22, 0xa2, 0xbf, 0x27, 0x40, 0x58,
	0x61, 0x83, 0x0f, 0xa0, 0xe1, 0xba, 0x7d, 0x68, 0x0b, 0xea, 0x12, 0xb0, 0x2c, 0xc6, 0x45, 0xf9,
	0xff, 0x41, 0x12, 0x7c, 0x0d, 0x1d, 0xd7, 0x23, 0x3a, 0x81, 0x45, 0x14, 0xde, 0x0b, 0x44, 0xf1,
	0x25, 0x20, 0xfb, 0xa2, 0xfe, 0xef, 0x99, 0xfd, 0xc5, 0x83, 0xb6, 0x4d, 0x77, 0x1e, 0x05, 0x6e,
	0x96, 0x5e, 0x4c, 0x19, 0x4d, 0xd2, 0x41, 0x4a, 0xd4, 0xdb, 0xa9, 0x8e, 0x1b, 0x45, 0xe3, 0x57,
	0xda, 0x16, 0x7c, 0x0e, 0x57, 0x76, 0xcf, 0x2b, 0xb1, 0x9f, 0xa0, 0x6d, 0x2f, 0x27, 0x9d, 0xd7,
	0x4d, 0x78, 0x55, 0x85, 0x19, 0x92, 0xa7, 0xe2, 0xee, 0xab, 0xfc, 0xea, 0xf8, 0xb2, 0x3a, 0xbd,
	0xa7, 0x0e, 0x0b, 0xe9, 0x5f, 0x78, 0xc1, 0xf4, 0x83, 0x4f, 0x61, 0xdb, 0xb9, 0xba, 0x74, 0x00,
	0x37, 0xc4, 0x02, 0x93, 0x01, 0x0c, 0xe8, 0x6c, 0x32, 0x77, 0xbf, 0xa1, 0xce, 0xee, 0x8b, 0xa3,
	0xe0, 0x5b, 0x68, 0x59, 0x9b, 0xe9, 0xa5, 0xdb, 0x12, 0xc4, 0xb0, 0xb9, 0xeb, 0xee, 0x75, 0x03,
	0xaa, 0xc5, 0x58, 0xd4, 0x1f, 0xb3, 0x8d, 0x79, 0xc8, 0x48, 0x46, 0x8f, 0x74, 0x1b, 0xd7, 0xcb,
	0x6d, 0xcc, 0xb1, 0xb2, 0x05, 0x7f, 0xd6, 0xe0, 0xb5, 0x85, 0x00, 0x5a, 0x2c, 0xb0, 0x96, 0x25,
	0x83, 0x98, 0x34, 0xe9, 0x24, 0xde, 0xf9, 0x4f, 0x25, 0xa4, 0x98, 0xc4, 0xab, 0xd4, 0xd0, 0x43,
	0xda, 0xc5, 0x21, 0x74, 0x5c, 0x92, 0x48, 0x7b, 0x51, 0x2d, 0x7c, 0xef, 0x2c, 0xaa, 0x68, 0xe1,
	0xa8, 0x6d, 0x6b, 0x23, 0xed, 0x6b, 0x1f, 0x36, 0x4d, 0x79, 0xa4, 0xfd, 0xac, 0x9d, 0xb2, 0x8d,
	0xad, 0x56, 0x8a, 0x17, 0x77, 0x59, 0x27, 0x69, 0xfe, 0xef, 0xa1, 0x69, 0xbc, 0xb6, 0x35, 0xfd,
	0xba, 0x53, 0xd6, 0xb8, 0x7b, 0xda, 0xaf, 0xe0, 0x6b, 0xa5, 0x9b, 0xad, 0xc9, 0x33, 0xd8, 0x76,
	0xca, 0x26, 0xed, 0x42, 0x29, 0xa7, 0xf7, 0xcf, 0xa4, 0x9c, 0x16, 0x8e, 0xb6, 0x1c, 0xfa, 0x69,
	0xd9, 0x17, 0x97, 0x84, 0xd2, 0xde, 0x6a, 0xce, 0xbe, 0x9c, 0xb2, 0xf6, 0x45, 0x5f, 0x6c, 0x2d,
	0xa5, 0x7d, 0x8d, 0xa0, 0xe3, 0x92, 0x53, 0xda, 0x97, 0x52, 0x54, 0xb7, 0xce, 0xa0, 0xa8, 0x16,
	0xae, 0x5a, 0x96, 0xae, 0x5a, 0x0e, 0xb4, 0x25, 0xad, 0xb4, 0x9b, 0xba, 0x73, 0xa0, 0x57, 0x6d,
	0x59, 0x31, 0xd0, 0x86, 0xc6, 0x52, 0x86, 0xbb, 0x75, 0x71, 0xcf, 0xe5, 0xaf, 0xfe, 0x1f, 0xc7,
	0xbe, 0xf7, 0xfc, 0xd8, 0xf7, 0xfe, 0x3e, 0xf6, 0xbd, 0xdf, 0x4f, 0xfc, 0xca, 0xf3, 0x13, 0xbf,
	0xf2, 0xd7, 0x89, 0x5f, 0xf9, 0xae, 0x3b, 0x4c, 0xb9, 0xf0, 0x10, 0xd3, 0xac, 0x57, 0xfe, 0x00,
	0x5a, 0x7e, 0xa1, 0x3c, 0x95, 0xdf, 0x28, 0xfc, 0xd9, 0x94, 0xe4, 0x07, 0x35, 0xf9, 0x8d, 0x72,
	0xe7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x92, 0x4c, 0x47, 0x7e, 0x0d, 0x00, 0x00,
}

func (m *PolicyCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cmd != nil {
		{
			size := m.Cmd.Size()
			i -= size
			if _, err := m.Cmd.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyCmd_SetRelationshipCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmd_SetRelationshipCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SetRelationshipCmd != nil {
		{
			size, err := m.SetRelationshipCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmd_DeleteRelationshipCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmd_DeleteRelationshipCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteRelationshipCmd != nil {
		{
			size, err := m.DeleteRelationshipCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmd_RegisterObjectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmd_RegisterObjectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegisterObjectCmd != nil {
		{
			size, err := m.RegisterObjectCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmd_ArchiveObjectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmd_ArchiveObjectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ArchiveObjectCmd != nil {
		{
			size, err := m.ArchiveObjectCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmd_CommitRegistrationsCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmd_CommitRegistrationsCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommitRegistrationsCmd != nil {
		{
			size, err := m.CommitRegistrationsCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmd_RevealRegistrationCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmd_RevealRegistrationCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RevealRegistrationCmd != nil {
		{
			size, err := m.RevealRegistrationCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmd_FlagHijackAttemptCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmd_FlagHijackAttemptCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FlagHijackAttemptCmd != nil {
		{
			size, err := m.FlagHijackAttemptCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmd_UnarchiveObjectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmd_UnarchiveObjectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnarchiveObjectCmd != nil {
		{
			size, err := m.UnarchiveObjectCmd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *SetRelationshipCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRelationshipCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetRelationshipCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Relationship != nil {
		{
			size, err := m.Relationship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRelationshipCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRelationshipCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRelationshipCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Relationship != nil {
		{
			size, err := m.Relationship.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterObjectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterObjectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterObjectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitRegistrationsCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitRegistrationsCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitRegistrationsCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintPolicyCmd(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitRegistrationsCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitRegistrationsCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitRegistrationsCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegistrationsCommitment != nil {
		{
			size, err := m.RegistrationsCommitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevealRegistrationCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevealRegistrationCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevealRegistrationCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RegistrationsCommitmentId != 0 {
		i = encodeVarintPolicyCmd(dAtA, i, uint64(m.RegistrationsCommitmentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RevealRegistrationCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevealRegistrationCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevealRegistrationCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlagHijackAttemptCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlagHijackAttemptCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlagHijackAttemptCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventId != 0 {
		i = encodeVarintPolicyCmd(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlagHijackAttemptCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlagHijackAttemptCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlagHijackAttemptCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnarchiveObjectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnarchiveObjectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnarchiveObjectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnarchiveObjectCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnarchiveObjectCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnarchiveObjectCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelationshipModified {
		i--
		if m.RelationshipModified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveObjectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveObjectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveObjectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetRelationshipCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRelationshipCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetRelationshipCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RecordExisted {
		i--
		if m.RecordExisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRelationshipCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRelationshipCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRelationshipCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordFound {
		i--
		if m.RecordFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisterObjectCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterObjectCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterObjectCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveObjectCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveObjectCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveObjectCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelationshipsRemoved != 0 {
		i = encodeVarintPolicyCmd(dAtA, i, uint64(m.RelationshipsRemoved))
		i--
		dAtA[i] = 0x10
	}
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PolicyCmdResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyCmdResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyCmdResult_SetRelationshipResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_SetRelationshipResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SetRelationshipResult != nil {
		{
			size, err := m.SetRelationshipResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdResult_DeleteRelationshipResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_DeleteRelationshipResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteRelationshipResult != nil {
		{
			size, err := m.DeleteRelationshipResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdResult_RegisterObjectResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_RegisterObjectResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegisterObjectResult != nil {
		{
			size, err := m.RegisterObjectResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdResult_ArchiveObjectResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_ArchiveObjectResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ArchiveObjectResult != nil {
		{
			size, err := m.ArchiveObjectResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdResult_CommitRegistrationsResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_CommitRegistrationsResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommitRegistrationsResult != nil {
		{
			size, err := m.CommitRegistrationsResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdResult_RevealRegistrationResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_RevealRegistrationResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RevealRegistrationResult != nil {
		{
			size, err := m.RevealRegistrationResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdResult_FlagHijackAttemptResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_FlagHijackAttemptResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FlagHijackAttemptResult != nil {
		{
			size, err := m.FlagHijackAttemptResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyCmdResult_UnarchiveObjectResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyCmdResult_UnarchiveObjectResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnarchiveObjectResult != nil {
		{
			size, err := m.UnarchiveObjectResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicyCmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func encodeVarintPolicyCmd(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicyCmd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PolicyCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != nil {
		n += m.Cmd.Size()
	}
	return n
}

func (m *PolicyCmd_SetRelationshipCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetRelationshipCmd != nil {
		l = m.SetRelationshipCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmd_DeleteRelationshipCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteRelationshipCmd != nil {
		l = m.DeleteRelationshipCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmd_RegisterObjectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterObjectCmd != nil {
		l = m.RegisterObjectCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmd_ArchiveObjectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArchiveObjectCmd != nil {
		l = m.ArchiveObjectCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmd_CommitRegistrationsCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitRegistrationsCmd != nil {
		l = m.CommitRegistrationsCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmd_RevealRegistrationCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RevealRegistrationCmd != nil {
		l = m.RevealRegistrationCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmd_FlagHijackAttemptCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlagHijackAttemptCmd != nil {
		l = m.FlagHijackAttemptCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmd_UnarchiveObjectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnarchiveObjectCmd != nil {
		l = m.UnarchiveObjectCmd.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *SetRelationshipCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relationship != nil {
		l = m.Relationship.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *DeleteRelationshipCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relationship != nil {
		l = m.Relationship.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *RegisterObjectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *CommitRegistrationsCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *CommitRegistrationsCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegistrationsCommitment != nil {
		l = m.RegistrationsCommitment.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *RevealRegistrationCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegistrationsCommitmentId != 0 {
		n += 1 + sovPolicyCmd(uint64(m.RegistrationsCommitmentId))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *RevealRegistrationCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *FlagHijackAttemptCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovPolicyCmd(uint64(m.EventId))
	}
	return n
}

func (m *FlagHijackAttemptCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *UnarchiveObjectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *UnarchiveObjectCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	if m.RelationshipModified {
		n += 2
	}
	return n
}

func (m *ArchiveObjectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *SetRelationshipCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordExisted {
		n += 2
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *DeleteRelationshipCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordFound {
		n += 2
	}
	return n
}

func (m *RegisterObjectCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func (m *ArchiveObjectCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Found {
		n += 2
	}
	if m.RelationshipsRemoved != 0 {
		n += 1 + sovPolicyCmd(uint64(m.RelationshipsRemoved))
	}
	return n
}

func (m *PolicyCmdResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *PolicyCmdResult_SetRelationshipResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetRelationshipResult != nil {
		l = m.SetRelationshipResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdResult_DeleteRelationshipResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteRelationshipResult != nil {
		l = m.DeleteRelationshipResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdResult_RegisterObjectResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterObjectResult != nil {
		l = m.RegisterObjectResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdResult_ArchiveObjectResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArchiveObjectResult != nil {
		l = m.ArchiveObjectResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdResult_CommitRegistrationsResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitRegistrationsResult != nil {
		l = m.CommitRegistrationsResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdResult_RevealRegistrationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RevealRegistrationResult != nil {
		l = m.RevealRegistrationResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdResult_FlagHijackAttemptResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlagHijackAttemptResult != nil {
		l = m.FlagHijackAttemptResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}
func (m *PolicyCmdResult_UnarchiveObjectResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnarchiveObjectResult != nil {
		l = m.UnarchiveObjectResult.Size()
		n += 1 + l + sovPolicyCmd(uint64(l))
	}
	return n
}

func sovPolicyCmd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicyCmd(x uint64) (n int) {
	return sovPolicyCmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicyCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetRelationshipCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetRelationshipCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmd_SetRelationshipCmd{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRelationshipCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteRelationshipCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmd_DeleteRelationshipCmd{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterObjectCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterObjectCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmd_RegisterObjectCmd{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchiveObjectCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ArchiveObjectCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmd_ArchiveObjectCmd{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitRegistrationsCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitRegistrationsCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmd_CommitRegistrationsCmd{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealRegistrationCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RevealRegistrationCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmd_RevealRegistrationCmd{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagHijackAttemptCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlagHijackAttemptCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmd_FlagHijackAttemptCmd{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnarchiveObjectCmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UnarchiveObjectCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &PolicyCmd_UnarchiveObjectCmd{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRelationshipCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRelationshipCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRelationshipCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relationship == nil {
				m.Relationship = &types.Relationship{}
			}
			if err := m.Relationship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRelationshipCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRelationshipCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRelationshipCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relationship", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relationship == nil {
				m.Relationship = &types.Relationship{}
			}
			if err := m.Relationship.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterObjectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterObjectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterObjectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &types.Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitRegistrationsCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitRegistrationsCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitRegistrationsCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitRegistrationsCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitRegistrationsCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitRegistrationsCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationsCommitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegistrationsCommitment == nil {
				m.RegistrationsCommitment = &RegistrationsCommitment{}
			}
			if err := m.RegistrationsCommitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevealRegistrationCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevealRegistrationCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevealRegistrationCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationsCommitmentId", wireType)
			}
			m.RegistrationsCommitmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationsCommitmentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &RegistrationProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevealRegistrationCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevealRegistrationCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevealRegistrationCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &AmendmentEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlagHijackAttemptCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlagHijackAttemptCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlagHijackAttemptCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlagHijackAttemptCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlagHijackAttemptCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlagHijackAttemptCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &AmendmentEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnarchiveObjectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnarchiveObjectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnarchiveObjectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &types.Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnarchiveObjectCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnarchiveObjectCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnarchiveObjectCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationshipModified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelationshipModified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveObjectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveObjectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveObjectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &types.Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRelationshipCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRelationshipCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRelationshipCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordExisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecordExisted = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRelationshipCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRelationshipCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRelationshipCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecordFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterObjectCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterObjectCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterObjectCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &RelationshipRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveObjectCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveObjectCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveObjectCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationshipsRemoved", wireType)
			}
			m.RelationshipsRemoved = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationshipsRemoved |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyCmdResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyCmdResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyCmdResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetRelationshipResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetRelationshipCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_SetRelationshipResult{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRelationshipResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteRelationshipCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_DeleteRelationshipResult{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterObjectResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterObjectCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_RegisterObjectResult{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchiveObjectResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ArchiveObjectCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_ArchiveObjectResult{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitRegistrationsResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitRegistrationsCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_CommitRegistrationsResult{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealRegistrationResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RevealRegistrationCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_RevealRegistrationResult{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagHijackAttemptResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlagHijackAttemptCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_FlagHijackAttemptResult{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnarchiveObjectResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UnarchiveObjectCmdResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &PolicyCmdResult_UnarchiveObjectResult{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicyCmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicyCmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicyCmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicyCmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicyCmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicyCmd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicyCmd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicyCmd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicyCmd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicyCmd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicyCmd = fmt.Errorf("proto: unexpected end of group")
)
