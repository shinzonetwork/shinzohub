syntax = "proto3";

package sourcehub.acp;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "sourcehub/acp/access_decision.proto";
import "sourcehub/acp/commitment.proto";
import "sourcehub/acp/params.proto";
import "sourcehub/acp/record.proto";
import "sourcehub/acp/registration.proto";
import "sourcenetwork/acp_core/policy.proto";
import "sourcenetwork/acp_core/policy_short.proto";
import "sourcenetwork/acp_core/relationship.proto";
import "sourcenetwork/acp_core/relationship_selector.proto";
import "sourcenetwork/acp_core/request.proto";

option go_package = "github.com/sourcenetwork/sourcehub/x/acp/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/params";
  }

  // Policy returns a Policy with the given ID.
  rpc Policy(QueryPolicyRequest) returns (QueryPolicyResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/policy/{id}";
  }

  // PolicyIds returns list of Ids for Policies registered in the system.
  rpc PolicyIds(QueryPolicyIdsRequest) returns (QueryPolicyIdsResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/policy_ids";
  }

  // FilterRelationships returns filtered set of Relationships in a Policy.
  rpc FilterRelationships(QueryFilterRelationshipsRequest) returns (QueryFilterRelationshipsResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/filter_relationships/{policy_id}";
  }

  // VerifyAccessRequest verifies whether an Access Request is accepted with respect to the given Policy's Relation Graph.
  rpc VerifyAccessRequest(QueryVerifyAccessRequestRequest) returns (QueryVerifyAccessRequestResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/verify_access_request/{policy_id}";
  }

  // ValidatePolicy verifies whether the given Policy definition is properly formatted
  rpc ValidatePolicy(QueryValidatePolicyRequest) returns (QueryValidatePolicyResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/validate_policy/{policy}";
  }

  // AccessDecision queries the system for an AccessDecision with the given ID.
  rpc AccessDecision(QueryAccessDecisionRequest) returns (QueryAccessDecisionResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/access_decision/{id}";
  }

  // ObjectOwner returns the Actor ID of the the given Object's owner
  rpc ObjectOwner(QueryObjectOwnerRequest) returns (QueryObjectOwnerResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/object_owner/{policy_id}/{object.resource}/{object.id}";
  }

  // RegistrationsCommitment returns a specific RegistrationsCommitment record
  rpc RegistrationsCommitment(QueryRegistrationsCommitmentRequest) returns (QueryRegistrationsCommitmentResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/registrations_commitment";
  }

  // RegistrationsCommitmentByCommitment returns all RegistrationCommitment records with a given commitment
  rpc RegistrationsCommitmentByCommitment(QueryRegistrationsCommitmentByCommitmentRequest) returns (QueryRegistrationsCommitmentByCommitmentResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/registrations_commitment_by_commitment";
  }

  // GenerateCommitment generates a Object registration commitment for the given objects
  //
  // Note: this operation assures the commitment is valid (no object is registered and the policy exists)
  // but exposes the Object Ids to the RPC node.
  // ONLY use this method if the node is trusted
  rpc GenerateCommitment(QueryGenerateCommitmentRequest) returns (QueryGenerateCommitmentResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/generate_commitment";
  }

  // HijackAttemptsByPolicy returns, for a given policy, all AmendmentEvent whose hijack flag is true
  rpc HijackAttemptsByPolicy(QueryHijackAttemptsByPolicyRequest) returns (QueryHijackAttemptsByPolicyResponse) {
    option (google.api.http).get = "/sourcenetwork/sourcehub/acp/hijack_attempts_by_policy";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryPolicyRequest {
  string id = 1;
}

message QueryPolicyResponse {
  PolicyRecord record = 1;
}

message QueryPolicyIdsRequest {
  //cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPolicyIdsResponse {
  //cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated string ids = 1;
}

message QueryFilterRelationshipsRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.RelationshipSelector selector = 2;
}

message QueryFilterRelationshipsResponse {
  repeated RelationshipRecord records = 1;
}

message QueryVerifyAccessRequestRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.AccessRequest access_request = 2;
}

message QueryVerifyAccessRequestResponse {
  bool valid = 1;
}

message QueryValidatePolicyRequest {
  string policy = 1;
  sourcenetwork.acp_core.PolicyMarshalingType marshal_type = 3;
}

message QueryValidatePolicyResponse {
  bool valid = 1;
  string error_msg = 2;
}

message QueryAccessDecisionRequest {
  string id = 1;
}

message QueryAccessDecisionResponse {
  AccessDecision decision = 1;
}

message QueryObjectOwnerRequest {
  string policy_id = 1;
  sourcenetwork.acp_core.Object object = 2;
}

message QueryObjectOwnerResponse {
  bool is_registered = 1;
  RelationshipRecord record = 2;
}

message QueryRegistrationsCommitmentRequest {
  uint64 id = 1;
}

message QueryRegistrationsCommitmentResponse {
  RegistrationsCommitment registrations_commitment = 1;
}

message QueryRegistrationsCommitmentByCommitmentRequest {
  bytes commitment = 1;
}

message QueryRegistrationsCommitmentByCommitmentResponse {
  repeated RegistrationsCommitment registrations_commitments = 1;
}

message QueryGenerateCommitmentRequest {
  string policy_id = 1;
  repeated sourcenetwork.acp_core.Object objects = 2;
  sourcenetwork.acp_core.Actor actor = 3;
}

message QueryGenerateCommitmentResponse {
  bytes commitment = 1;
  string hex_commitment = 2;
  repeated RegistrationProof proofs = 3;
  repeated string proofs_json = 4;
}

message QueryHijackAttemptsByPolicyRequest {
  string policy_id = 1;
}

message QueryHijackAttemptsByPolicyResponse {
  repeated AmendmentEvent events = 1;
}
