syntax = "proto3";

package sourcehub.acp;

import "google/protobuf/timestamp.proto";
import "sourcenetwork/acp_core/relationship.proto";

option go_package = "github.com/sourcenetwork/sourcehub/x/acp/types";

// SignedPolicyCmd represents a Command issued by an Actor in the context of a Policy
// The command represents an instruction to be executed
// The message type contains a signature which is used to authenticate the Command's Actor
message SignedPolicyCmd {
  // payload contains the command context
  SignedPolicyCmdPayload payload = 1;

  // signature is a signature of the payload.
  // The signature is generated using the VerificationMethod / Authorization fields
  // specificied by the DID document of the Actor.
  bytes signature = 2;
}

// SignedPolicyCmdPayload represents the payload containing the context of the issued command
message SignedPolicyCmdPayload {
  // actor is a did string representing the actor which issued the command
  string actor = 1;

  // issued_height is the SourceHub block height of when the Payload was created
  uint64 issued_height = 2;

  // expiration_delta specifies the maximum number of blocks from the issued height during which the Command Payload will be accepted.
  // This field is mandatory and is used to prevent replay attacks
  uint64 expiration_delta = 3;

  // creation_time contains a client generated timestamp for the creation of the command.
  // This is used only as metadata and isn't trusted
  google.protobuf.Timestamp creation_time = 4;

  // policy_id is the ID of the policy under which the Command will be executed
  string policy_id = 5;

  PolicyCmd cmd = 6;
}

message PolicyCmd {
  oneof cmd {
    SetRelationshipCmd set_relationship_cmd = 1;
    DeleteRelationshipCmd delete_relationship_cmd = 2;
    RegisterObjectCmd register_object_cmd = 3;
    UnregisterObjectCmd unregister_object_cmd = 4;
  }
}

// SetRelationship creates or updates a Relationship within a Policy
// A Relationship is a statement which ties together an object and a subjecto with a "relation",
// which means the set of high level rules defined in the Policy will apply to these entities.
message SetRelationshipCmd {
  sourcenetwork.acp_core.Relationship relationship = 1;
}

// DelereRelationship removes a Relationship from a Policy.
// If the Relationship was not found in a Policy, this Cmd is a no-op.
message DeleteRelationshipCmd {
  sourcenetwork.acp_core.Relationship relationship = 1;
}

// RegisterObject creates a special kind of Relationship within a Policy which ties
// the msg's Actor as the owner of the msg's Object.
// The Owner has complete control over the set of subjects that are related to their Object,
// giving them autonomy to share the object and revoke acces to the object,
// much like owners in a Discretionary Access Control model.
//
// Attempting to register a previously registered Object is an error,
// Object IDs are therefore assumed to be unique within a Policy.
message RegisterObjectCmd {
  sourcenetwork.acp_core.Object object = 1;
}


// UnregisterObject let's an Object's Owner effectively "unshare" their Object.
// This method wipes all Relationships referencing the given Object.
//
// A caveat is that after removing the Relationships, a record of the original Object owner
// is maintained to prevent an "ownership hijack" attack.
// 
// Suppose Bob owns object Foo, which is shared with Bob but not Eve.
// Eve wants to access Foo but was not given permission to, they could "hijack" Bob's object by waiting for Bob to Unregister Foo,
// then submitting a RegisterObject Msg, effectively becoming Foo's new owner.
// If Charlie has a copy of the object, Eve could convince Charlie to share his copy, granting Eve access to Foo.
// The previous scenario where an unauthorized user is able to claim ownership to data previously unaccessible to them
// is an "ownership hijack".
message UnregisterObjectCmd {
  sourcenetwork.acp_core.Object object = 1;
}

// SetRelationshipCmd sets a Relationship in a Policy
message SetRelationshipCmdResult {
  // Indicates whether the given Relationship previously existed, ie the Tx was a no op
  bool record_existed = 1;
  sourcenetwork.acp_core.RelationshipRecord record = 2;
}

// DeleteRelationshipCmdResult removes a Relationship in a Policy
message DeleteRelationshipCmdResult {
  bool record_found = 1;
}

// RegisterObjectCmdResult registers an Object in a Policy
message RegisterObjectCmdResult {
  sourcenetwork.acp_core.RegistrationResult result = 1;
  sourcenetwork.acp_core.RelationshipRecord record = 2;
}

// UnregisterObjectCmdResult unregisters an Object in a Policy
message UnregisterObjectCmdResult {
  bool found = 1;
  uint64 relationships_removed = 2;
}

message PolicyCmdResult {
  oneof result {
    SetRelationshipCmdResult set_relationship_result = 1;
    DeleteRelationshipCmdResult delete_relationship_result = 2;
    RegisterObjectCmdResult register_object_result = 3;
    UnregisterObjectCmdResult unregister_object_result = 4;
  }
}
