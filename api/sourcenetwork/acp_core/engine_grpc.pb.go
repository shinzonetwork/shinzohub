// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sourcenetwork/acp_core/engine.proto

package acp_core

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ACPEngine_CreatePolicy_FullMethodName          = "/sourcenetwork.acp_core.ACPEngine/CreatePolicy"
	ACPEngine_GetPolicy_FullMethodName             = "/sourcenetwork.acp_core.ACPEngine/GetPolicy"
	ACPEngine_ListPolicies_FullMethodName          = "/sourcenetwork.acp_core.ACPEngine/ListPolicies"
	ACPEngine_DeletePolicy_FullMethodName          = "/sourcenetwork.acp_core.ACPEngine/DeletePolicy"
	ACPEngine_SetRelationship_FullMethodName       = "/sourcenetwork.acp_core.ACPEngine/SetRelationship"
	ACPEngine_DeleteRelationship_FullMethodName    = "/sourcenetwork.acp_core.ACPEngine/DeleteRelationship"
	ACPEngine_RegisterObject_FullMethodName        = "/sourcenetwork.acp_core.ACPEngine/RegisterObject"
	ACPEngine_UnregisterObject_FullMethodName      = "/sourcenetwork.acp_core.ACPEngine/UnregisterObject"
	ACPEngine_TransferObject_FullMethodName        = "/sourcenetwork.acp_core.ACPEngine/TransferObject"
	ACPEngine_GetObjectRegistration_FullMethodName = "/sourcenetwork.acp_core.ACPEngine/GetObjectRegistration"
	ACPEngine_FilterRelationships_FullMethodName   = "/sourcenetwork.acp_core.ACPEngine/FilterRelationships"
	ACPEngine_ValidatePolicy_FullMethodName        = "/sourcenetwork.acp_core.ACPEngine/ValidatePolicy"
	ACPEngine_SetParams_FullMethodName             = "/sourcenetwork.acp_core.ACPEngine/SetParams"
	ACPEngine_GetParams_FullMethodName             = "/sourcenetwork.acp_core.ACPEngine/GetParams"
	ACPEngine_VerifyAccessRequest_FullMethodName   = "/sourcenetwork.acp_core.ACPEngine/VerifyAccessRequest"
)

// ACPEngineClient is the client API for ACPEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ACPEngineClient interface {
	// CreatePolicy adds a new Policy to SourceHub.
	// The Policy models an aplication's high level access control rules.
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	// GetPolicy returns a Policy with the given ID
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// ListPolicies returns a set of Policies registered in the system
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	// DeletePolicy removes a Policy and all relationships and objects registered within it.
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error)
	// SetRelationship creates or updates a Relationship within a Policy
	// A Relationship is a statement which ties together an object and a subject with a "relation",
	// which means the set of high level rules defined in the Policy will apply to these entities.
	SetRelationship(ctx context.Context, in *SetRelationshipRequest, opts ...grpc.CallOption) (*SetRelationshipResponse, error)
	// DelereRelationship removes a Relationship from a Policy.
	// If the Relationship was not found in a Policy, this Cmd is a no-op.
	DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error)
	// RegisterObject creates a special kind of Relationship within a Policy which ties
	// the msg's Actor as the owner of the msg's Object.
	// The Owner has complete control over the set of subjects that are related to their Object,
	// giving them autonomy to share the object and revoke acces to the object,
	// much like owners in a Discretionary Access Control model.
	//
	// Attempting to register a previously registered Object is an error,
	// Object IDs are therefore assumed to be unique within a Policy.
	RegisterObject(ctx context.Context, in *RegisterObjectRequest, opts ...grpc.CallOption) (*RegisterObjectResponse, error)
	// UnregisterObject let's an Object's Owner effectively "unshare" their Object.
	// This method wipes all Relationships referencing the given Object.
	//
	// A caveat is that after removing the Relationships, a record of the original Object owner
	// is maintained to prevent an "ownership hijack" attack.
	//
	// Suppose Bob owns object Foo, which is shared with Bob but not Eve.
	// Eve wants to access Foo but was not given permission to, they could "hijack" Bob's object by waiting for Bob to Unregister Foo,
	// then submitting a RegisterObject Cmd, effectively becoming Foo's new owner.
	// If Charlie has a copy of the object, Eve could convince Charlie to share his copy, granting Eve access to Foo.
	// The previous scenario where an unauthorized user is able to claim ownership to data previously unaccessible to them
	// is an "ownership hijack".
	UnregisterObject(ctx context.Context, in *UnregisterObjectRequest, opts ...grpc.CallOption) (*UnregisterObjectResponse, error)
	// TransferObject updates an Object's Owner to some other actor in the system, after which the original owner
	// loses autonomy over the object and cannot create or modify relationships.
	TransferObject(ctx context.Context, in *TransferObjectRequest, opts ...grpc.CallOption) (*TransferObjectResponse, error)
	// GetObjectRegistration returns the registration status of an Object
	GetObjectRegistration(ctx context.Context, in *GetObjectRegistrationRequest, opts ...grpc.CallOption) (*GetObjectRegistrationResponse, error)
	// FilterRelationships returns filtered set of Relationships in a Policy.
	FilterRelationships(ctx context.Context, in *FilterRelationshipsRequest, opts ...grpc.CallOption) (*FilterRelationshipsResponse, error)
	ValidatePolicy(ctx context.Context, in *ValidatePolicyRequest, opts ...grpc.CallOption) (*ValidatePolicyResponse, error)
	SetParams(ctx context.Context, in *SetParamsRequest, opts ...grpc.CallOption) (*SetParamsResponse, error)
	GetParams(ctx context.Context, in *GetParamsRequest, opts ...grpc.CallOption) (*GetParamsResponse, error)
	VerifyAccessRequest(ctx context.Context, in *VerifyAccessRequestRequest, opts ...grpc.CallOption) (*VerifyAccessRequestResponse, error)
}

type aCPEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewACPEngineClient(cc grpc.ClientConnInterface) ACPEngineClient {
	return &aCPEngineClient{cc}
}

func (c *aCPEngineClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, ACPEngine_CreatePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, ACPEngine_GetPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, ACPEngine_ListPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error) {
	out := new(DeletePolicyResponse)
	err := c.cc.Invoke(ctx, ACPEngine_DeletePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) SetRelationship(ctx context.Context, in *SetRelationshipRequest, opts ...grpc.CallOption) (*SetRelationshipResponse, error) {
	out := new(SetRelationshipResponse)
	err := c.cc.Invoke(ctx, ACPEngine_SetRelationship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) DeleteRelationship(ctx context.Context, in *DeleteRelationshipRequest, opts ...grpc.CallOption) (*DeleteRelationshipResponse, error) {
	out := new(DeleteRelationshipResponse)
	err := c.cc.Invoke(ctx, ACPEngine_DeleteRelationship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) RegisterObject(ctx context.Context, in *RegisterObjectRequest, opts ...grpc.CallOption) (*RegisterObjectResponse, error) {
	out := new(RegisterObjectResponse)
	err := c.cc.Invoke(ctx, ACPEngine_RegisterObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) UnregisterObject(ctx context.Context, in *UnregisterObjectRequest, opts ...grpc.CallOption) (*UnregisterObjectResponse, error) {
	out := new(UnregisterObjectResponse)
	err := c.cc.Invoke(ctx, ACPEngine_UnregisterObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) TransferObject(ctx context.Context, in *TransferObjectRequest, opts ...grpc.CallOption) (*TransferObjectResponse, error) {
	out := new(TransferObjectResponse)
	err := c.cc.Invoke(ctx, ACPEngine_TransferObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) GetObjectRegistration(ctx context.Context, in *GetObjectRegistrationRequest, opts ...grpc.CallOption) (*GetObjectRegistrationResponse, error) {
	out := new(GetObjectRegistrationResponse)
	err := c.cc.Invoke(ctx, ACPEngine_GetObjectRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) FilterRelationships(ctx context.Context, in *FilterRelationshipsRequest, opts ...grpc.CallOption) (*FilterRelationshipsResponse, error) {
	out := new(FilterRelationshipsResponse)
	err := c.cc.Invoke(ctx, ACPEngine_FilterRelationships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) ValidatePolicy(ctx context.Context, in *ValidatePolicyRequest, opts ...grpc.CallOption) (*ValidatePolicyResponse, error) {
	out := new(ValidatePolicyResponse)
	err := c.cc.Invoke(ctx, ACPEngine_ValidatePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) SetParams(ctx context.Context, in *SetParamsRequest, opts ...grpc.CallOption) (*SetParamsResponse, error) {
	out := new(SetParamsResponse)
	err := c.cc.Invoke(ctx, ACPEngine_SetParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) GetParams(ctx context.Context, in *GetParamsRequest, opts ...grpc.CallOption) (*GetParamsResponse, error) {
	out := new(GetParamsResponse)
	err := c.cc.Invoke(ctx, ACPEngine_GetParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCPEngineClient) VerifyAccessRequest(ctx context.Context, in *VerifyAccessRequestRequest, opts ...grpc.CallOption) (*VerifyAccessRequestResponse, error) {
	out := new(VerifyAccessRequestResponse)
	err := c.cc.Invoke(ctx, ACPEngine_VerifyAccessRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACPEngineServer is the server API for ACPEngine service.
// All implementations must embed UnimplementedACPEngineServer
// for forward compatibility
type ACPEngineServer interface {
	// CreatePolicy adds a new Policy to SourceHub.
	// The Policy models an aplication's high level access control rules.
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	// GetPolicy returns a Policy with the given ID
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	// ListPolicies returns a set of Policies registered in the system
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	// DeletePolicy removes a Policy and all relationships and objects registered within it.
	DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	// SetRelationship creates or updates a Relationship within a Policy
	// A Relationship is a statement which ties together an object and a subject with a "relation",
	// which means the set of high level rules defined in the Policy will apply to these entities.
	SetRelationship(context.Context, *SetRelationshipRequest) (*SetRelationshipResponse, error)
	// DelereRelationship removes a Relationship from a Policy.
	// If the Relationship was not found in a Policy, this Cmd is a no-op.
	DeleteRelationship(context.Context, *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error)
	// RegisterObject creates a special kind of Relationship within a Policy which ties
	// the msg's Actor as the owner of the msg's Object.
	// The Owner has complete control over the set of subjects that are related to their Object,
	// giving them autonomy to share the object and revoke acces to the object,
	// much like owners in a Discretionary Access Control model.
	//
	// Attempting to register a previously registered Object is an error,
	// Object IDs are therefore assumed to be unique within a Policy.
	RegisterObject(context.Context, *RegisterObjectRequest) (*RegisterObjectResponse, error)
	// UnregisterObject let's an Object's Owner effectively "unshare" their Object.
	// This method wipes all Relationships referencing the given Object.
	//
	// A caveat is that after removing the Relationships, a record of the original Object owner
	// is maintained to prevent an "ownership hijack" attack.
	//
	// Suppose Bob owns object Foo, which is shared with Bob but not Eve.
	// Eve wants to access Foo but was not given permission to, they could "hijack" Bob's object by waiting for Bob to Unregister Foo,
	// then submitting a RegisterObject Cmd, effectively becoming Foo's new owner.
	// If Charlie has a copy of the object, Eve could convince Charlie to share his copy, granting Eve access to Foo.
	// The previous scenario where an unauthorized user is able to claim ownership to data previously unaccessible to them
	// is an "ownership hijack".
	UnregisterObject(context.Context, *UnregisterObjectRequest) (*UnregisterObjectResponse, error)
	// TransferObject updates an Object's Owner to some other actor in the system, after which the original owner
	// loses autonomy over the object and cannot create or modify relationships.
	TransferObject(context.Context, *TransferObjectRequest) (*TransferObjectResponse, error)
	// GetObjectRegistration returns the registration status of an Object
	GetObjectRegistration(context.Context, *GetObjectRegistrationRequest) (*GetObjectRegistrationResponse, error)
	// FilterRelationships returns filtered set of Relationships in a Policy.
	FilterRelationships(context.Context, *FilterRelationshipsRequest) (*FilterRelationshipsResponse, error)
	ValidatePolicy(context.Context, *ValidatePolicyRequest) (*ValidatePolicyResponse, error)
	SetParams(context.Context, *SetParamsRequest) (*SetParamsResponse, error)
	GetParams(context.Context, *GetParamsRequest) (*GetParamsResponse, error)
	VerifyAccessRequest(context.Context, *VerifyAccessRequestRequest) (*VerifyAccessRequestResponse, error)
	mustEmbedUnimplementedACPEngineServer()
}

// UnimplementedACPEngineServer must be embedded to have forward compatible implementations.
type UnimplementedACPEngineServer struct {
}

func (UnimplementedACPEngineServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedACPEngineServer) GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedACPEngineServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedACPEngineServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedACPEngineServer) SetRelationship(context.Context, *SetRelationshipRequest) (*SetRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRelationship not implemented")
}
func (UnimplementedACPEngineServer) DeleteRelationship(context.Context, *DeleteRelationshipRequest) (*DeleteRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationship not implemented")
}
func (UnimplementedACPEngineServer) RegisterObject(context.Context, *RegisterObjectRequest) (*RegisterObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterObject not implemented")
}
func (UnimplementedACPEngineServer) UnregisterObject(context.Context, *UnregisterObjectRequest) (*UnregisterObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterObject not implemented")
}
func (UnimplementedACPEngineServer) TransferObject(context.Context, *TransferObjectRequest) (*TransferObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferObject not implemented")
}
func (UnimplementedACPEngineServer) GetObjectRegistration(context.Context, *GetObjectRegistrationRequest) (*GetObjectRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectRegistration not implemented")
}
func (UnimplementedACPEngineServer) FilterRelationships(context.Context, *FilterRelationshipsRequest) (*FilterRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterRelationships not implemented")
}
func (UnimplementedACPEngineServer) ValidatePolicy(context.Context, *ValidatePolicyRequest) (*ValidatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePolicy not implemented")
}
func (UnimplementedACPEngineServer) SetParams(context.Context, *SetParamsRequest) (*SetParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParams not implemented")
}
func (UnimplementedACPEngineServer) GetParams(context.Context, *GetParamsRequest) (*GetParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParams not implemented")
}
func (UnimplementedACPEngineServer) VerifyAccessRequest(context.Context, *VerifyAccessRequestRequest) (*VerifyAccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccessRequest not implemented")
}
func (UnimplementedACPEngineServer) mustEmbedUnimplementedACPEngineServer() {}

// UnsafeACPEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ACPEngineServer will
// result in compilation errors.
type UnsafeACPEngineServer interface {
	mustEmbedUnimplementedACPEngineServer()
}

func RegisterACPEngineServer(s grpc.ServiceRegistrar, srv ACPEngineServer) {
	s.RegisterService(&ACPEngine_ServiceDesc, srv)
}

func _ACPEngine_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_CreatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_ListPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_SetRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).SetRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_SetRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).SetRelationship(ctx, req.(*SetRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_DeleteRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).DeleteRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_DeleteRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).DeleteRelationship(ctx, req.(*DeleteRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_RegisterObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).RegisterObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_RegisterObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).RegisterObject(ctx, req.(*RegisterObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_UnregisterObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).UnregisterObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_UnregisterObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).UnregisterObject(ctx, req.(*UnregisterObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_TransferObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).TransferObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_TransferObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).TransferObject(ctx, req.(*TransferObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_GetObjectRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).GetObjectRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_GetObjectRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).GetObjectRegistration(ctx, req.(*GetObjectRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_FilterRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).FilterRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_FilterRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).FilterRelationships(ctx, req.(*FilterRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_ValidatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).ValidatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_ValidatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).ValidatePolicy(ctx, req.(*ValidatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_SetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).SetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_SetParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).SetParams(ctx, req.(*SetParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_GetParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).GetParams(ctx, req.(*GetParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACPEngine_VerifyAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACPEngineServer).VerifyAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ACPEngine_VerifyAccessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACPEngineServer).VerifyAccessRequest(ctx, req.(*VerifyAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ACPEngine_ServiceDesc is the grpc.ServiceDesc for ACPEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ACPEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sourcenetwork.acp_core.ACPEngine",
	HandlerType: (*ACPEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _ACPEngine_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _ACPEngine_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _ACPEngine_ListPolicies_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _ACPEngine_DeletePolicy_Handler,
		},
		{
			MethodName: "SetRelationship",
			Handler:    _ACPEngine_SetRelationship_Handler,
		},
		{
			MethodName: "DeleteRelationship",
			Handler:    _ACPEngine_DeleteRelationship_Handler,
		},
		{
			MethodName: "RegisterObject",
			Handler:    _ACPEngine_RegisterObject_Handler,
		},
		{
			MethodName: "UnregisterObject",
			Handler:    _ACPEngine_UnregisterObject_Handler,
		},
		{
			MethodName: "TransferObject",
			Handler:    _ACPEngine_TransferObject_Handler,
		},
		{
			MethodName: "GetObjectRegistration",
			Handler:    _ACPEngine_GetObjectRegistration_Handler,
		},
		{
			MethodName: "FilterRelationships",
			Handler:    _ACPEngine_FilterRelationships_Handler,
		},
		{
			MethodName: "ValidatePolicy",
			Handler:    _ACPEngine_ValidatePolicy_Handler,
		},
		{
			MethodName: "SetParams",
			Handler:    _ACPEngine_SetParams_Handler,
		},
		{
			MethodName: "GetParams",
			Handler:    _ACPEngine_GetParams_Handler,
		},
		{
			MethodName: "VerifyAccessRequest",
			Handler:    _ACPEngine_VerifyAccessRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sourcenetwork/acp_core/engine.proto",
}
