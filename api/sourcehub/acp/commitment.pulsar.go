// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package acp

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	types "github.com/sourcenetwork/acp_core/pkg/pulsar/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_RegistrationProof_2_list)(nil)

type _RegistrationProof_2_list struct {
	list *[][]byte
}

func (x *_RegistrationProof_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_RegistrationProof_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_RegistrationProof_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_RegistrationProof_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_RegistrationProof_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message RegistrationProof at list field MerkleProof as it is not of Message kind"))
}

func (x *_RegistrationProof_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_RegistrationProof_2_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_RegistrationProof_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_RegistrationProof              protoreflect.MessageDescriptor
	fd_RegistrationProof_object       protoreflect.FieldDescriptor
	fd_RegistrationProof_merkle_proof protoreflect.FieldDescriptor
	fd_RegistrationProof_leaf_count   protoreflect.FieldDescriptor
	fd_RegistrationProof_leaf_index   protoreflect.FieldDescriptor
)

func init() {
	file_sourcehub_acp_commitment_proto_init()
	md_RegistrationProof = File_sourcehub_acp_commitment_proto.Messages().ByName("RegistrationProof")
	fd_RegistrationProof_object = md_RegistrationProof.Fields().ByName("object")
	fd_RegistrationProof_merkle_proof = md_RegistrationProof.Fields().ByName("merkle_proof")
	fd_RegistrationProof_leaf_count = md_RegistrationProof.Fields().ByName("leaf_count")
	fd_RegistrationProof_leaf_index = md_RegistrationProof.Fields().ByName("leaf_index")
}

var _ protoreflect.Message = (*fastReflection_RegistrationProof)(nil)

type fastReflection_RegistrationProof RegistrationProof

func (x *RegistrationProof) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RegistrationProof)(x)
}

func (x *RegistrationProof) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcehub_acp_commitment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RegistrationProof_messageType fastReflection_RegistrationProof_messageType
var _ protoreflect.MessageType = fastReflection_RegistrationProof_messageType{}

type fastReflection_RegistrationProof_messageType struct{}

func (x fastReflection_RegistrationProof_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RegistrationProof)(nil)
}
func (x fastReflection_RegistrationProof_messageType) New() protoreflect.Message {
	return new(fastReflection_RegistrationProof)
}
func (x fastReflection_RegistrationProof_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RegistrationProof
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RegistrationProof) Descriptor() protoreflect.MessageDescriptor {
	return md_RegistrationProof
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RegistrationProof) Type() protoreflect.MessageType {
	return _fastReflection_RegistrationProof_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RegistrationProof) New() protoreflect.Message {
	return new(fastReflection_RegistrationProof)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RegistrationProof) Interface() protoreflect.ProtoMessage {
	return (*RegistrationProof)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RegistrationProof) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Object != nil {
		value := protoreflect.ValueOfMessage(x.Object.ProtoReflect())
		if !f(fd_RegistrationProof_object, value) {
			return
		}
	}
	if len(x.MerkleProof) != 0 {
		value := protoreflect.ValueOfList(&_RegistrationProof_2_list{list: &x.MerkleProof})
		if !f(fd_RegistrationProof_merkle_proof, value) {
			return
		}
	}
	if x.LeafCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LeafCount)
		if !f(fd_RegistrationProof_leaf_count, value) {
			return
		}
	}
	if x.LeafIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LeafIndex)
		if !f(fd_RegistrationProof_leaf_index, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RegistrationProof) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcehub.acp.RegistrationProof.object":
		return x.Object != nil
	case "sourcehub.acp.RegistrationProof.merkle_proof":
		return len(x.MerkleProof) != 0
	case "sourcehub.acp.RegistrationProof.leaf_count":
		return x.LeafCount != uint64(0)
	case "sourcehub.acp.RegistrationProof.leaf_index":
		return x.LeafIndex != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationProof"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationProof does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegistrationProof) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcehub.acp.RegistrationProof.object":
		x.Object = nil
	case "sourcehub.acp.RegistrationProof.merkle_proof":
		x.MerkleProof = nil
	case "sourcehub.acp.RegistrationProof.leaf_count":
		x.LeafCount = uint64(0)
	case "sourcehub.acp.RegistrationProof.leaf_index":
		x.LeafIndex = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationProof"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationProof does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RegistrationProof) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcehub.acp.RegistrationProof.object":
		value := x.Object
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcehub.acp.RegistrationProof.merkle_proof":
		if len(x.MerkleProof) == 0 {
			return protoreflect.ValueOfList(&_RegistrationProof_2_list{})
		}
		listValue := &_RegistrationProof_2_list{list: &x.MerkleProof}
		return protoreflect.ValueOfList(listValue)
	case "sourcehub.acp.RegistrationProof.leaf_count":
		value := x.LeafCount
		return protoreflect.ValueOfUint64(value)
	case "sourcehub.acp.RegistrationProof.leaf_index":
		value := x.LeafIndex
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationProof"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationProof does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegistrationProof) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcehub.acp.RegistrationProof.object":
		x.Object = value.Message().Interface().(*types.Object)
	case "sourcehub.acp.RegistrationProof.merkle_proof":
		lv := value.List()
		clv := lv.(*_RegistrationProof_2_list)
		x.MerkleProof = *clv.list
	case "sourcehub.acp.RegistrationProof.leaf_count":
		x.LeafCount = value.Uint()
	case "sourcehub.acp.RegistrationProof.leaf_index":
		x.LeafIndex = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationProof"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationProof does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegistrationProof) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcehub.acp.RegistrationProof.object":
		if x.Object == nil {
			x.Object = new(types.Object)
		}
		return protoreflect.ValueOfMessage(x.Object.ProtoReflect())
	case "sourcehub.acp.RegistrationProof.merkle_proof":
		if x.MerkleProof == nil {
			x.MerkleProof = [][]byte{}
		}
		value := &_RegistrationProof_2_list{list: &x.MerkleProof}
		return protoreflect.ValueOfList(value)
	case "sourcehub.acp.RegistrationProof.leaf_count":
		panic(fmt.Errorf("field leaf_count of message sourcehub.acp.RegistrationProof is not mutable"))
	case "sourcehub.acp.RegistrationProof.leaf_index":
		panic(fmt.Errorf("field leaf_index of message sourcehub.acp.RegistrationProof is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationProof"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationProof does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RegistrationProof) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcehub.acp.RegistrationProof.object":
		m := new(types.Object)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcehub.acp.RegistrationProof.merkle_proof":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_RegistrationProof_2_list{list: &list})
	case "sourcehub.acp.RegistrationProof.leaf_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sourcehub.acp.RegistrationProof.leaf_index":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationProof"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationProof does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RegistrationProof) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcehub.acp.RegistrationProof", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RegistrationProof) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegistrationProof) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RegistrationProof) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RegistrationProof) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RegistrationProof)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Object != nil {
			l = options.Size(x.Object)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.MerkleProof) > 0 {
			for _, b := range x.MerkleProof {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.LeafCount != 0 {
			n += 1 + runtime.Sov(uint64(x.LeafCount))
		}
		if x.LeafIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.LeafIndex))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RegistrationProof)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LeafIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LeafIndex))
			i--
			dAtA[i] = 0x20
		}
		if x.LeafCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LeafCount))
			i--
			dAtA[i] = 0x18
		}
		if len(x.MerkleProof) > 0 {
			for iNdEx := len(x.MerkleProof) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.MerkleProof[iNdEx])
				copy(dAtA[i:], x.MerkleProof[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MerkleProof[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Object != nil {
			encoded, err := options.Marshal(x.Object)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RegistrationProof)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RegistrationProof: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RegistrationProof: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Object == nil {
					x.Object = &types.Object{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Object); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MerkleProof", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MerkleProof = append(x.MerkleProof, make([]byte, postIndex-iNdEx))
				copy(x.MerkleProof[len(x.MerkleProof)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LeafCount", wireType)
				}
				x.LeafCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LeafCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LeafIndex", wireType)
				}
				x.LeafIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LeafIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RegistrationsCommitment            protoreflect.MessageDescriptor
	fd_RegistrationsCommitment_id         protoreflect.FieldDescriptor
	fd_RegistrationsCommitment_policy_id  protoreflect.FieldDescriptor
	fd_RegistrationsCommitment_commitment protoreflect.FieldDescriptor
	fd_RegistrationsCommitment_expired    protoreflect.FieldDescriptor
	fd_RegistrationsCommitment_validity   protoreflect.FieldDescriptor
	fd_RegistrationsCommitment_metadata   protoreflect.FieldDescriptor
)

func init() {
	file_sourcehub_acp_commitment_proto_init()
	md_RegistrationsCommitment = File_sourcehub_acp_commitment_proto.Messages().ByName("RegistrationsCommitment")
	fd_RegistrationsCommitment_id = md_RegistrationsCommitment.Fields().ByName("id")
	fd_RegistrationsCommitment_policy_id = md_RegistrationsCommitment.Fields().ByName("policy_id")
	fd_RegistrationsCommitment_commitment = md_RegistrationsCommitment.Fields().ByName("commitment")
	fd_RegistrationsCommitment_expired = md_RegistrationsCommitment.Fields().ByName("expired")
	fd_RegistrationsCommitment_validity = md_RegistrationsCommitment.Fields().ByName("validity")
	fd_RegistrationsCommitment_metadata = md_RegistrationsCommitment.Fields().ByName("metadata")
}

var _ protoreflect.Message = (*fastReflection_RegistrationsCommitment)(nil)

type fastReflection_RegistrationsCommitment RegistrationsCommitment

func (x *RegistrationsCommitment) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RegistrationsCommitment)(x)
}

func (x *RegistrationsCommitment) slowProtoReflect() protoreflect.Message {
	mi := &file_sourcehub_acp_commitment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RegistrationsCommitment_messageType fastReflection_RegistrationsCommitment_messageType
var _ protoreflect.MessageType = fastReflection_RegistrationsCommitment_messageType{}

type fastReflection_RegistrationsCommitment_messageType struct{}

func (x fastReflection_RegistrationsCommitment_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RegistrationsCommitment)(nil)
}
func (x fastReflection_RegistrationsCommitment_messageType) New() protoreflect.Message {
	return new(fastReflection_RegistrationsCommitment)
}
func (x fastReflection_RegistrationsCommitment_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RegistrationsCommitment
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RegistrationsCommitment) Descriptor() protoreflect.MessageDescriptor {
	return md_RegistrationsCommitment
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RegistrationsCommitment) Type() protoreflect.MessageType {
	return _fastReflection_RegistrationsCommitment_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RegistrationsCommitment) New() protoreflect.Message {
	return new(fastReflection_RegistrationsCommitment)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RegistrationsCommitment) Interface() protoreflect.ProtoMessage {
	return (*RegistrationsCommitment)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RegistrationsCommitment) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_RegistrationsCommitment_id, value) {
			return
		}
	}
	if x.PolicyId != "" {
		value := protoreflect.ValueOfString(x.PolicyId)
		if !f(fd_RegistrationsCommitment_policy_id, value) {
			return
		}
	}
	if len(x.Commitment) != 0 {
		value := protoreflect.ValueOfBytes(x.Commitment)
		if !f(fd_RegistrationsCommitment_commitment, value) {
			return
		}
	}
	if x.Expired != false {
		value := protoreflect.ValueOfBool(x.Expired)
		if !f(fd_RegistrationsCommitment_expired, value) {
			return
		}
	}
	if x.Validity != nil {
		value := protoreflect.ValueOfMessage(x.Validity.ProtoReflect())
		if !f(fd_RegistrationsCommitment_validity, value) {
			return
		}
	}
	if x.Metadata != nil {
		value := protoreflect.ValueOfMessage(x.Metadata.ProtoReflect())
		if !f(fd_RegistrationsCommitment_metadata, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RegistrationsCommitment) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sourcehub.acp.RegistrationsCommitment.id":
		return x.Id != uint64(0)
	case "sourcehub.acp.RegistrationsCommitment.policy_id":
		return x.PolicyId != ""
	case "sourcehub.acp.RegistrationsCommitment.commitment":
		return len(x.Commitment) != 0
	case "sourcehub.acp.RegistrationsCommitment.expired":
		return x.Expired != false
	case "sourcehub.acp.RegistrationsCommitment.validity":
		return x.Validity != nil
	case "sourcehub.acp.RegistrationsCommitment.metadata":
		return x.Metadata != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationsCommitment"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationsCommitment does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegistrationsCommitment) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sourcehub.acp.RegistrationsCommitment.id":
		x.Id = uint64(0)
	case "sourcehub.acp.RegistrationsCommitment.policy_id":
		x.PolicyId = ""
	case "sourcehub.acp.RegistrationsCommitment.commitment":
		x.Commitment = nil
	case "sourcehub.acp.RegistrationsCommitment.expired":
		x.Expired = false
	case "sourcehub.acp.RegistrationsCommitment.validity":
		x.Validity = nil
	case "sourcehub.acp.RegistrationsCommitment.metadata":
		x.Metadata = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationsCommitment"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationsCommitment does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RegistrationsCommitment) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sourcehub.acp.RegistrationsCommitment.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "sourcehub.acp.RegistrationsCommitment.policy_id":
		value := x.PolicyId
		return protoreflect.ValueOfString(value)
	case "sourcehub.acp.RegistrationsCommitment.commitment":
		value := x.Commitment
		return protoreflect.ValueOfBytes(value)
	case "sourcehub.acp.RegistrationsCommitment.expired":
		value := x.Expired
		return protoreflect.ValueOfBool(value)
	case "sourcehub.acp.RegistrationsCommitment.validity":
		value := x.Validity
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sourcehub.acp.RegistrationsCommitment.metadata":
		value := x.Metadata
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationsCommitment"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationsCommitment does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegistrationsCommitment) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sourcehub.acp.RegistrationsCommitment.id":
		x.Id = value.Uint()
	case "sourcehub.acp.RegistrationsCommitment.policy_id":
		x.PolicyId = value.Interface().(string)
	case "sourcehub.acp.RegistrationsCommitment.commitment":
		x.Commitment = value.Bytes()
	case "sourcehub.acp.RegistrationsCommitment.expired":
		x.Expired = value.Bool()
	case "sourcehub.acp.RegistrationsCommitment.validity":
		x.Validity = value.Message().Interface().(*Duration)
	case "sourcehub.acp.RegistrationsCommitment.metadata":
		x.Metadata = value.Message().Interface().(*RecordMetadata)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationsCommitment"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationsCommitment does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegistrationsCommitment) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcehub.acp.RegistrationsCommitment.validity":
		if x.Validity == nil {
			x.Validity = new(Duration)
		}
		return protoreflect.ValueOfMessage(x.Validity.ProtoReflect())
	case "sourcehub.acp.RegistrationsCommitment.metadata":
		if x.Metadata == nil {
			x.Metadata = new(RecordMetadata)
		}
		return protoreflect.ValueOfMessage(x.Metadata.ProtoReflect())
	case "sourcehub.acp.RegistrationsCommitment.id":
		panic(fmt.Errorf("field id of message sourcehub.acp.RegistrationsCommitment is not mutable"))
	case "sourcehub.acp.RegistrationsCommitment.policy_id":
		panic(fmt.Errorf("field policy_id of message sourcehub.acp.RegistrationsCommitment is not mutable"))
	case "sourcehub.acp.RegistrationsCommitment.commitment":
		panic(fmt.Errorf("field commitment of message sourcehub.acp.RegistrationsCommitment is not mutable"))
	case "sourcehub.acp.RegistrationsCommitment.expired":
		panic(fmt.Errorf("field expired of message sourcehub.acp.RegistrationsCommitment is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationsCommitment"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationsCommitment does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RegistrationsCommitment) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sourcehub.acp.RegistrationsCommitment.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sourcehub.acp.RegistrationsCommitment.policy_id":
		return protoreflect.ValueOfString("")
	case "sourcehub.acp.RegistrationsCommitment.commitment":
		return protoreflect.ValueOfBytes(nil)
	case "sourcehub.acp.RegistrationsCommitment.expired":
		return protoreflect.ValueOfBool(false)
	case "sourcehub.acp.RegistrationsCommitment.validity":
		m := new(Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sourcehub.acp.RegistrationsCommitment.metadata":
		m := new(RecordMetadata)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sourcehub.acp.RegistrationsCommitment"))
		}
		panic(fmt.Errorf("message sourcehub.acp.RegistrationsCommitment does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RegistrationsCommitment) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sourcehub.acp.RegistrationsCommitment", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RegistrationsCommitment) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RegistrationsCommitment) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RegistrationsCommitment) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RegistrationsCommitment) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RegistrationsCommitment)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.PolicyId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Commitment)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Expired {
			n += 2
		}
		if x.Validity != nil {
			l = options.Size(x.Validity)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Metadata != nil {
			l = options.Size(x.Metadata)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RegistrationsCommitment)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Metadata != nil {
			encoded, err := options.Marshal(x.Metadata)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.Validity != nil {
			encoded, err := options.Marshal(x.Validity)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Expired {
			i--
			if x.Expired {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x20
		}
		if len(x.Commitment) > 0 {
			i -= len(x.Commitment)
			copy(dAtA[i:], x.Commitment)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Commitment)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.PolicyId) > 0 {
			i -= len(x.PolicyId)
			copy(dAtA[i:], x.PolicyId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PolicyId)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RegistrationsCommitment)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RegistrationsCommitment: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RegistrationsCommitment: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PolicyId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Commitment = append(x.Commitment[:0], dAtA[iNdEx:postIndex]...)
				if x.Commitment == nil {
					x.Commitment = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Expired = bool(v != 0)
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Validity == nil {
					x.Validity = &Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Validity); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Metadata == nil {
					x.Metadata = &RecordMetadata{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Metadata); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sourcehub/acp/commitment.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RegistrationProof models an opening proof for a RegistrationCommitment
type RegistrationProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *types.Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// Hash of neighbors required to validate proof.
	//
	// Hashes must be ordered as a RFC6962 "merkle audit path"
	// https://www.rfc-editor.org/rfc/rfc6962#section-2.1.1
	MerkleProof [][]byte `protobuf:"bytes,2,rep,name=merkle_proof,json=merkleProof,proto3" json:"merkle_proof,omitempty"`
	LeafCount   uint64   `protobuf:"varint,3,opt,name=leaf_count,json=leafCount,proto3" json:"leaf_count,omitempty"`
	LeafIndex   uint64   `protobuf:"varint,4,opt,name=leaf_index,json=leafIndex,proto3" json:"leaf_index,omitempty"`
}

func (x *RegistrationProof) Reset() {
	*x = RegistrationProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcehub_acp_commitment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationProof) ProtoMessage() {}

// Deprecated: Use RegistrationProof.ProtoReflect.Descriptor instead.
func (*RegistrationProof) Descriptor() ([]byte, []int) {
	return file_sourcehub_acp_commitment_proto_rawDescGZIP(), []int{0}
}

func (x *RegistrationProof) GetObject() *types.Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *RegistrationProof) GetMerkleProof() [][]byte {
	if x != nil {
		return x.MerkleProof
	}
	return nil
}

func (x *RegistrationProof) GetLeafCount() uint64 {
	if x != nil {
		return x.LeafCount
	}
	return 0
}

func (x *RegistrationProof) GetLeafIndex() uint64 {
	if x != nil {
		return x.LeafIndex
	}
	return 0
}

// RegistrationsCommitment models a batched cryptographic commitment
// of a set of Object registrations issued by an Actor
type RegistrationsCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PolicyId string `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// commitment is a merkle root of registrations
	Commitment []byte `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
	Expired    bool   `protobuf:"varint,4,opt,name=expired,proto3" json:"expired,omitempty"`
	// validity models the duration for which the commitment is valid for
	Validity *Duration       `protobuf:"bytes,5,opt,name=validity,proto3" json:"validity,omitempty"`
	Metadata *RecordMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *RegistrationsCommitment) Reset() {
	*x = RegistrationsCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sourcehub_acp_commitment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationsCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationsCommitment) ProtoMessage() {}

// Deprecated: Use RegistrationsCommitment.ProtoReflect.Descriptor instead.
func (*RegistrationsCommitment) Descriptor() ([]byte, []int) {
	return file_sourcehub_acp_commitment_proto_rawDescGZIP(), []int{1}
}

func (x *RegistrationsCommitment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RegistrationsCommitment) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *RegistrationsCommitment) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *RegistrationsCommitment) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

func (x *RegistrationsCommitment) GetValidity() *Duration {
	if x != nil {
		return x.Validity
	}
	return nil
}

func (x *RegistrationsCommitment) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_sourcehub_acp_commitment_proto protoreflect.FileDescriptor

var file_sourcehub_acp_commitment_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2f, 0x61, 0x63, 0x70, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x70, 0x1a,
	0x29, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61,
	0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x68, 0x75, 0x62, 0x2f, 0x61, 0x63, 0x70, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x68, 0x75,
	0x62, 0x2f, 0x61, 0x63, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xac, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xf0, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x68, 0x75, 0x62,
	0x2e, 0x61, 0x63, 0x70, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x70, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x99, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x63, 0x70, 0x42, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2f, 0x61, 0x63, 0x70, 0xa2, 0x02, 0x03, 0x53, 0x41,
	0x58, 0xaa, 0x02, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x68, 0x75, 0x62, 0x2e, 0x41, 0x63,
	0x70, 0xca, 0x02, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x68, 0x75, 0x62, 0x5c, 0x41, 0x63,
	0x70, 0xe2, 0x02, 0x19, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x68, 0x75, 0x62, 0x5c, 0x41, 0x63,
	0x70, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x68, 0x75, 0x62, 0x3a, 0x3a, 0x41, 0x63, 0x70, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sourcehub_acp_commitment_proto_rawDescOnce sync.Once
	file_sourcehub_acp_commitment_proto_rawDescData = file_sourcehub_acp_commitment_proto_rawDesc
)

func file_sourcehub_acp_commitment_proto_rawDescGZIP() []byte {
	file_sourcehub_acp_commitment_proto_rawDescOnce.Do(func() {
		file_sourcehub_acp_commitment_proto_rawDescData = protoimpl.X.CompressGZIP(file_sourcehub_acp_commitment_proto_rawDescData)
	})
	return file_sourcehub_acp_commitment_proto_rawDescData
}

var file_sourcehub_acp_commitment_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sourcehub_acp_commitment_proto_goTypes = []interface{}{
	(*RegistrationProof)(nil),       // 0: sourcehub.acp.RegistrationProof
	(*RegistrationsCommitment)(nil), // 1: sourcehub.acp.RegistrationsCommitment
	(*types.Object)(nil),            // 2: sourcenetwork.acp_core.Object
	(*Duration)(nil),                // 3: sourcehub.acp.Duration
	(*RecordMetadata)(nil),          // 4: sourcehub.acp.RecordMetadata
}
var file_sourcehub_acp_commitment_proto_depIdxs = []int32{
	2, // 0: sourcehub.acp.RegistrationProof.object:type_name -> sourcenetwork.acp_core.Object
	3, // 1: sourcehub.acp.RegistrationsCommitment.validity:type_name -> sourcehub.acp.Duration
	4, // 2: sourcehub.acp.RegistrationsCommitment.metadata:type_name -> sourcehub.acp.RecordMetadata
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_sourcehub_acp_commitment_proto_init() }
func file_sourcehub_acp_commitment_proto_init() {
	if File_sourcehub_acp_commitment_proto != nil {
		return
	}
	file_sourcehub_acp_record_proto_init()
	file_sourcehub_acp_time_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sourcehub_acp_commitment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sourcehub_acp_commitment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationsCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sourcehub_acp_commitment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sourcehub_acp_commitment_proto_goTypes,
		DependencyIndexes: file_sourcehub_acp_commitment_proto_depIdxs,
		MessageInfos:      file_sourcehub_acp_commitment_proto_msgTypes,
	}.Build()
	File_sourcehub_acp_commitment_proto = out.File
	file_sourcehub_acp_commitment_proto_rawDesc = nil
	file_sourcehub_acp_commitment_proto_goTypes = nil
	file_sourcehub_acp_commitment_proto_depIdxs = nil
}
